import { baseUrl } from '@/api/server/configApi';
import { validSlug } from '@/utils/region/validSlug';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// ‚úÖ –ü—É—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–¥–ª—è SEO)
const seoRoutes = [
  '/tutors',
  '/subjects', 
  '/about',
  '/reviews',
  '/pricing',
  '/blog',
  '/docs',
  '/sign-in-tutor',
];

// ‚úÖ –ü—É—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã (—Å–ª—É–∂–µ–±–Ω—ã–µ)
const nonRegionalRoutes = [
  '/sign-in-student', 
  '/student',
  '/tutor',
  '/admin',
  '/dashboard',
  '/settings',
  '/payment',
  '/api'
];

// ‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ slug (–∫—Ä–æ–º–µ –ú–æ—Å–∫–≤—ã)
const regionalSlugs = validSlug;

export const config = {
  matcher: [
    '/',    
    '/tutors/:path*',
    '/subjects/:path*', 
    '/about/:path*',
    '/reviews/:path*',
    '/pricing/:path*',
    '/blog/:path*',
    '/docs/:path*',
    '/sign-in-tutor/:path*',
    '/sign-in-student/:path*', 
    '/student/:path*',
    '/tutor/:path*',
    '/admin/:path*',
    '/dashboard/:path*',
    '/settings/:path*',
    '/payment/:path*',
    '/:region(spb|ekb|novosibirsk|kazan|nn|chelyabinsk)/:path*'
  ],
};

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  console.log('üîß MIDDLEWARE TRIGGERED for:', pathname);

  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω –∏–∑ –∫—É–∫–∏
  const regionCookie = request.cookies.get('region-id');
  let currentRegionSlug = 'msk'; // –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  if (regionCookie?.value) {
    try {
      const res = await fetch(`${baseUrl}/api/cities/${regionCookie.value}`);
      if (res.ok) {
        const cityData = await res.json();
        currentRegionSlug = cityData.slug || 'msk';
        console.log('üìç –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω –∏–∑ –∫—É–∫–∏:', currentRegionSlug);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è slug:', err);
    }
  }

  const hasRegionalPrefix = regionalSlugs.some(slug => pathname === `/${slug}` || pathname.startsWith(`/${slug}/`));
  const isSeoRoute = seoRoutes.some(route => pathname.startsWith(route));
  const isNonRegional = nonRegionalRoutes.some(route => pathname.startsWith(route));

  // üîÑ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  if (pathname === '/') {
    if (currentRegionSlug !== 'msk') {
      console.log('üîÑ –ì–ª–∞–≤–Ω–∞—è: —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–ª–∞–≤–Ω—É—é', `/${currentRegionSlug}`);
      return NextResponse.redirect(new URL(`/${currentRegionSlug}`, request.url));
    }
    console.log('üè† –ì–ª–∞–≤–Ω–∞—è: –ú–æ—Å–∫–≤–∞, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ /');
    return NextResponse.next();
  }

  // üîÑ SEO-–º–∞—Ä—à—Ä—É—Ç—ã
  if (isSeoRoute) {
    // ‚ùó –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ù–ï –ú–æ—Å–∫–≤–∞ –∏ –Ω–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–∞ ‚Üí –¥–æ–±–∞–≤–ª—è–µ–º
    if (currentRegionSlug !== 'msk' && !hasRegionalPrefix) {
      console.log('üîÑ SEO: –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å', currentRegionSlug, '–∫', pathname);
      return NextResponse.redirect(new URL(`/${currentRegionSlug}${pathname}`, request.url));
    }

    // ‚ùó –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ù–ï –ú–æ—Å–∫–≤–∞ –∏ URL –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å ‚Üí –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if (currentRegionSlug !== 'msk' && hasRegionalPrefix) {
      const regionInPath = regionalSlugs.find(slug => pathname === `/${slug}` || pathname.startsWith(`/${slug}/`));
      if (regionInPath && regionInPath !== currentRegionSlug) {
        const newPath = pathname.replace(`/${regionInPath}`, `/${currentRegionSlug}`);
        console.log('üîÑ SEO: –ú–µ–Ω—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å', regionInPath, '‚Üí', currentRegionSlug, '–¥–ª—è', pathname);
        return NextResponse.redirect(new URL(newPath, request.url));
      }
    }

    // ‚ùó –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ú–æ—Å–∫–≤–∞ –∏ –µ—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å ‚Üí —É–±–∏—Ä–∞–µ–º
    if (currentRegionSlug === 'msk' && hasRegionalPrefix) {
      const regionInPath = regionalSlugs.find(slug => pathname === `/${slug}` || pathname.startsWith(`/${slug}/`));
      if (regionInPath) {
        const newPath = pathname.replace(`/${regionInPath}`, '') || '/';
        console.log('üîÑ SEO: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å', regionInPath, '—Å', pathname, '‚Üí', newPath);
        return NextResponse.redirect(new URL(newPath, request.url));
      }
    }
  }

  // üîÑ –°–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  if (isNonRegional && hasRegionalPrefix) {
    const regionInPath = regionalSlugs.find(slug => pathname === `/${slug}` || pathname.startsWith(`/${slug}/`));
    if (regionInPath) {
      const newPath = pathname.replace(`/${regionInPath}`, '') || '/';
      console.log('üîÑ –°–ª—É–∂–µ–±–Ω—ã–µ: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å', regionInPath, '—Å', pathname, '‚Üí', newPath);
      return NextResponse.redirect(new URL(newPath, request.url));
    }
  }

  console.log('‚û°Ô∏è Middleware –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å');
  return NextResponse.next();
}
