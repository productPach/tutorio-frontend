import { baseUrl } from '@/api/server/configApi';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

// ‚úÖ –ü—É—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (–¥–ª—è SEO)
const seoRoutes = [
  '/tutors',
  '/subjects', 
  '/about',
  '/reviews',
  '/pricing',
  '/blog',
  '/docs'
];

// ‚úÖ –ü—É—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å—ã (—Å–ª—É–∂–µ–±–Ω—ã–µ)
const nonRegionalRoutes = [
  '/sign-in-tutor',
  '/sign-in-student', 
  '/student',
  '/tutor',
  '/admin',
  '/dashboard',
  '/settings',
  '/payment',
  '/api'
];

export const config = {
  matcher: [
    // ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    '/',
    
    // ‚úÖ –í—Å–µ SEO-–º–∞—Ä—à—Ä—É—Ç—ã
    '/tutors/:path*',
    '/subjects/:path*', 
    '/about/:path*',
    '/reviews/:path*',
    '/pricing/:path*',
    '/blog/:path*',
    '/docs/:path*',
    
    // ‚úÖ –í—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    '/sign-in-tutor/:path*',
    '/sign-in-student/:path*', 
    '/student/:path*',
    '/tutor/:path*',
    '/admin/:path*',
    '/dashboard/:path*',
    '/settings/:path*',
    '/payment/:path*',
    
    // ‚úÖ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    '/:region(spb|ekb|novosibirsk|kazan|nn|chelyabinsk)/:path*'
  ],
};

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  console.log('üîß MIDDLEWARE TRIGGERED for:', request.nextUrl.pathname);

  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω –∏–∑ –∫—É–∫–∏
  const regionCookie = request.cookies.get('region-id');
  let currentRegionSlug = 'msk'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞
  
  if (regionCookie?.value) {
    try {
      const response = await fetch(
        `${baseUrl}/api/cities/${regionCookie.value}`
      );
      if (response.ok) {
        const cityData = await response.json();
        currentRegionSlug = cityData.slug || 'msk';
        console.log('üìç –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω:', currentRegionSlug);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è slug:', error);
    }
  }
  
  // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ slugs –ö–†–û–ú–ï –ú–æ—Å–∫–≤—ã (—Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
  const regionalSlugs = ['spb', 'ekb', 'novosibirsk', 'kazan', 'nn', 'chelyabinsk'];
  const hasRegionalPrefix = regionalSlugs.some(slug => 
    pathname.startsWith(`/${slug}/`) || pathname === `/${slug}`
  );
  
  // üîÑ –õ–û–ì–ò–ö–ê –î–õ–Ø –ì–õ–ê–í–ù–û–ô –°–¢–†–ê–ù–ò–¶–´
  if (pathname === '/') {
    // ‚úÖ –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ù–ï –ú–æ—Å–∫–≤–∞ - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é –≥–ª–∞–≤–Ω—É—é
    if (currentRegionSlug !== 'msk') {
      console.log('üîÑ –ì–ª–∞–≤–Ω–∞—è: –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞', `/${currentRegionSlug}`);
      return NextResponse.redirect(new URL(`/${currentRegionSlug}`, request.url));
    }
    // ‚úÖ –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ú–æ—Å–∫–≤–∞ - –æ—Å—Ç–∞–µ–º—Å—è –Ω–∞ /
    console.log('üè† –ì–ª–∞–≤–Ω–∞—è: –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ / (–ú–æ—Å–∫–≤–∞)');
    return NextResponse.next();
  }
  
  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –ø—É—Ç—å –∫ SEO-–º–∞—Ä—à—Ä—É—Ç–∞–º
  const isSeoRoute = seoRoutes.some(route => pathname.startsWith(route));
  const isNonRegional = nonRegionalRoutes.some(route => pathname.startsWith(route));
  
  // üîÑ –õ–û–ì–ò–ö–ê –î–õ–Ø SEO-–ú–ê–†–®–†–£–¢–û–í
  if (isSeoRoute) {
    // ‚úÖ –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ù–ï –ú–æ—Å–∫–≤–∞ –∏ –ø—É—Ç—å –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ - –¥–æ–±–∞–≤–ª—è–µ–º
    if (currentRegionSlug !== 'msk' && !hasRegionalPrefix) {
      console.log('üîÑ SEO: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å', currentRegionSlug, '–∫', pathname);
      const newUrl = new URL(`/${currentRegionSlug}${pathname}`, request.url);
      return NextResponse.redirect(newUrl);
    }
    
    // ‚úÖ –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –ú–æ—Å–∫–≤–∞, –Ω–æ URL –∏–º–µ–µ—Ç —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å - —É–±–∏—Ä–∞–µ–º
    if (currentRegionSlug === 'msk' && hasRegionalPrefix) {
      const regionInPath = regionalSlugs.find(slug => 
        pathname.startsWith(`/${slug}/`) || pathname === `/${slug}`
      );
      if (regionInPath) {
        console.log('üîÑ SEO: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å', regionInPath, '—Å', pathname);
        const newPathname = pathname.replace(`/${regionInPath}`, '') || '/';
        const newUrl = new URL(newPathname, request.url);
        return NextResponse.redirect(newUrl);
      }
    }
  }
  
  // üîÑ –õ–û–ì–ò–ö–ê –î–õ–Ø –°–õ–£–ñ–ï–ë–ù–´–• –ú–ê–†–®–†–£–¢–û–í
  if (isNonRegional && hasRegionalPrefix) {
    // ‚úÖ –£–±–∏—Ä–∞–µ–º —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å —Å–æ —Å–ª—É–∂–µ–±–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    const regionInPath = regionalSlugs.find(slug => 
      pathname.startsWith(`/${slug}/`) || pathname === `/${slug}`
    );
    if (regionInPath) {
      console.log('üîÑ –°–ª—É–∂–µ–±–Ω—ã–µ: –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å', regionInPath, '—Å', pathname);
      const newPathname = pathname.replace(`/${regionInPath}`, '') || '/';
      const newUrl = new URL(newPathname, request.url);
      return NextResponse.redirect(newUrl);
    }
  }
  
  console.log('‚û°Ô∏è Middleware –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å');
  return NextResponse.next();
}