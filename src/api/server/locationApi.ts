import { baseUrl } from "./configApi";
import httpClient from "./httpClient";

// // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
// export const fetchGetAllCities = async () => {
//   try {
//     const response = await fetch(`${baseUrl}cities`, {
//       method: "GET",
//       headers: {
//         "Content-Type": "application/json",
//       },
//     });

//     // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω—ã–º
//     if (!response.ok) {
//       throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
//     }

//     // –ü–∞—Ä—Å–∏–Ω–≥ JSON
//     const data = await response.json();
//     return data;

//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:", error);
//     throw error; // –ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
//   }
// }
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
export const fetchGetAllCities = async () => {
  try {
    const response = await httpClient.get(`cities`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:', error.response?.status, error.response?.data || error.message);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–¥–ª–≤–∞—Ä–∞ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è slug –≤ url - spb/ekb/kzn/novgorod –∏ —Ç–¥)
export const fetchGetCitySlugById = async (cityId: string): Promise<string> => {
  try {
    const response = await fetch(`${baseUrl}cities/${cityId}`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
    }

    const cityData = await response.json();
    return cityData.slug || 'msk'; // ‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º slug –∏–ª–∏ –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ slug –≥–æ—Ä–æ–¥–∞:", error);
    return 'msk'; // ‚úÖ –§–æ–ª–±—ç–∫ –Ω–∞ –ú–æ—Å–∫–≤—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
};


// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend
// export const fetchDetectUserRegion = async () => {
//   try {
//     const response = await httpClient.get("region");
//     return response.data; // –æ–±—ä–µ–∫—Ç City –∏–∑ –ë–î
//   } catch (error: any) {
//     console.error(
//       "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
//       error.response?.status,
//       error.response?.data || error.message
//     );
//     throw error;
//   }
// };

interface FetchRegionParams {
  set_cookie?: boolean;
  region_id?: string;
}

export async function fetchDetectUserRegion(params?: FetchRegionParams) {
  try {
    const urlParams = new URLSearchParams();
    
    if (params?.set_cookie) urlParams.append('set_cookie', 'true');
    if (params?.region_id) urlParams.append('region_id', params.region_id);
    
    const queryString = urlParams.toString();
    const url = `${baseUrl}region${queryString ? `?${queryString}` : ''}`;
    
    // ‚úÖ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫—É–∫–∏ –∏–∑ headers
    const headers: HeadersInit = {};
    
    if (typeof window === 'undefined') {
      // –≠—Ç–æ SSR - –ø–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∏–∑ next/headers
      const { cookies } = await import('next/headers');
      const cookieStore = await cookies();
      const regionCookie = await cookieStore.get('region-id');
      
      console.log('üîç SSR Debug - regionCookie:', regionCookie); // ‚úÖ –õ–æ–≥–∏
      
      if (regionCookie) {
        headers.Cookie = `region-id=${regionCookie.value}`;
        console.log('üç™ SSR: –ü–µ—Ä–µ–¥–∞–µ–º –∫—É–∫—É –≤ API:', regionCookie.value);
      } else {
        console.log('‚ùå SSR: –ö—É–∫–∞ region-id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    } else {
      console.log('üåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å');
    }
    
    console.log('üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', headers); // ‚úÖ –õ–æ–≥–∏
    
    const res = await fetch(url, { 
      headers,
      cache: 'no-store'
    });
    
    if (!res.ok) throw new Error(`Status: ${res.status}`);
    return await res.json();
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ fetchDetectUserRegion:", err);
    throw err;
  }
}