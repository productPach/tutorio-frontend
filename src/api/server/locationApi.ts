import { City } from "@/types/types";
import { baseUrl } from "./configApi";
import httpClient from "./httpClient";

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤
export const fetchGetAllCities = async () => {
  try {
    const response = await httpClient.get(`cities`);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:', error.response?.status, error.response?.data || error.message);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–¥–ª–≤–∞—Ä–∞ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è slug –≤ url - spb/ekb/kzn/novgorod –∏ —Ç–¥)
export const fetchGetCityById = async (cityId: string): Promise<City> => {
  try {
    const response = await fetch(`${baseUrl}cities/${cityId}`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
    }

    const cityData = await response.json();
    return cityData
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ slug –≥–æ—Ä–æ–¥–∞:", error);
    throw error;
  }
};

// type GetCityBySlug = {
//   title: string,
//   region_name_dative: string,
// }

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ ID (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∏–¥–ª–≤–∞—Ä–∞ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è slug –≤ url - spb/ekb/kzn/novgorod –∏ —Ç–¥)
export const fetchGetCityBySlug = async (slug: string): Promise<City> => {
  try {
    const response = await fetch(`${baseUrl}city-slug/${slug}`, {
      method: "GET",
      headers: { "Content-Type": "application/json" },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
    }

    const cityData = await response.json();
    return cityData;
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ slug:", error);
    return {
      id: '',
      title: '–ú–æ—Å–∫–≤–∞',
      area: '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
      shortTitle: '–ú–æ—Å–∫–≤–∞ –∏ –æ–±–ª–∞—Å—Ç—å',
      slug: 'msk',
      region_name_dative: '–ú–æ—Å–∫–≤–µ –∏ –æ–±–ª–∞—Å—Ç–∏',
      metros: [],
      districts: [],
      regionalCities: [],
    } // ‚úÖ –§–æ–ª–±—ç–∫ –Ω–∞ –ú–æ—Å–∫–≤—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    //  throw error;
  }
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ backend
// export const fetchDetectUserRegion = async () => {
//   try {
//     const response = await httpClient.get("region");
//     return response.data; // –æ–±—ä–µ–∫—Ç City –∏–∑ –ë–î
//   } catch (error: any) {
//     console.error(
//       "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
//       error.response?.status,
//       error.response?.data || error.message
//     );
//     throw error;
//   }
// };

// interface FetchRegionParams {
//   set_cookie?: boolean;
//   region_id?: string;
// }

// export async function fetchDetectUserRegion(params?: FetchRegionParams) {
//   try {
//     const urlParams = new URLSearchParams();
    
//     if (params?.set_cookie) urlParams.append('set_cookie', 'true');
//     if (params?.region_id) urlParams.append('region_id', params.region_id);
    
//     const queryString = urlParams.toString();
//     const url = `${baseUrl}region${queryString ? `?${queryString}` : ''}`;
    
//     // ‚úÖ –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫—É–∫–∏ –∏–∑ headers
//     const headers: HeadersInit = {};
    
//     if (typeof window === 'undefined') {
//       // –≠—Ç–æ SSR - –ø–æ–ª—É—á–∞–µ–º –∫—É–∫–∏ –∏–∑ next/headers
//       const { cookies } = await import('next/headers');
//       const cookieStore = await cookies();
//       const regionCookie = await cookieStore.get('region-id');
      
//       console.log('üîç SSR Debug - regionCookie:', regionCookie); // ‚úÖ –õ–æ–≥–∏
      
//       if (regionCookie) {
//         headers.Cookie = `region-id=${regionCookie.value}`;
//         console.log('üç™ SSR: –ü–µ—Ä–µ–¥–∞–µ–º –∫—É–∫—É –≤ API:', regionCookie.value);
//       } else {
//         console.log('‚ùå SSR: –ö—É–∫–∞ region-id –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
//       }
//     } else {
//       console.log('üåê –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å');
//     }
    
//     console.log('üîç –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', headers); // ‚úÖ –õ–æ–≥–∏
    
//     const res = await fetch(url, { 
//       headers,
//       cache: 'no-store'
//     });
    
//     if (!res.ok) throw new Error(`Status: ${res.status}`);
//     return await res.json();
//   } catch (err) {
//     console.error("–û—à–∏–±–∫–∞ fetchDetectUserRegion:", err);
//     throw err;
//   }
// }

// –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ –æ—Ç API –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω–∞
export type DetectRegionResponse = {
  city: City; // –û–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã
  askUserConfirmation: boolean; // –§–ª–∞–≥ ‚Äî –Ω—É–∂–Ω–æ –ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
};

// ‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç slug (–Ω–∞–ø—Ä–∏–º–µ—Ä, "spb") –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ test_ip –¥–ª—è —Ç–µ—Å—Ç–æ–≤
export const fetchDetectUserRegion = async (slug?: string, test_ip?: string) => {
  try {
    // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç query-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const urlParams = new URLSearchParams();

    // üîπ –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â–∏–π slug —Ä–µ–≥–∏–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "spb" –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ "/")
    if (slug) urlParams.append("slug", slug);

    // üîπ test_ip ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ dev –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (test_ip) urlParams.append("test_ip", test_ip);

    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
    const queryString = urlParams.toString();
    const url = `${baseUrl}region${queryString ? `?${queryString}` : ""}`;

    // üöÄ –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const res = await fetch(url, { cache: "no-store" });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
    if (!res.ok) throw new Error(`Status: ${res.status}`);

    // –ü–∞—Ä—Å–∏–º JSON
    const data: DetectRegionResponse = await res.json();

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    return data;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ fetchDetectUserRegion:", err);
    throw err;
  }
};
