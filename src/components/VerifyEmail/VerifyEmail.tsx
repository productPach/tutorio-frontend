"use client";
import styles from "./VerifyEmail.module.css";
import { useRouter, useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import { verifyEmail } from "@/store/features/tutorSlice";
import { useAppDispatch } from "@/store/store";
import { io } from "socket.io-client";
import { host, port } from "@/api/server/configApi";
import clsx from "clsx";
import { jwtDecode } from "jwt-decode";
import { verifyEmailStudent } from "@/store/features/studentSlice";

interface DecodedToken {
  userId: string;
  email: string;
  userType: "tutor" | "student"; // –ó–¥–µ—Å—å —É–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è userType
}

const socket = io(`${host}${port}`);

export default function VerifyEmailPage() {
  const searchParams = useSearchParams();
  const token = searchParams.get("token");
  const dispatch = useAppDispatch();

  const [isLoading, setIsLoading] = useState(true);
  const [isVerified, setIsVerified] = useState(false);
  const [error, setError] = useState(false);

  useEffect(() => {
    if (!token) {
      setError(true);
      setIsLoading(false);
      return;
    }

    try {
      const decodedToken = jwtDecode<DecodedToken>(token); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const userType = decodedToken.userType; // –ü–æ–ª—É—á–∞–µ–º userType –∏–∑ payload —Ç–æ–∫–µ–Ω–∞

      // –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç userType
      const action = userType === "tutor" ? verifyEmail : verifyEmailStudent;

      dispatch(action({ token }))
        .unwrap()
        .then(() => {
          setIsVerified(true);
          if (token) {
            socket.emit("verifyEmail", token); // üîπ –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
          }
        })
        .catch(() => {
          setError(true);
        })
        .finally(() => {
          setIsLoading(false);
        });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
      setError(true);
      setIsLoading(false);
    }

    return () => {
      socket.off("emailVerified");
    };
  }, [token, dispatch]);

  // üîπ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
  useEffect(() => {
    const handleVerified = ({ tutorId }: { tutorId: string }) => {
      //console.log("Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è ID:", tutorId);
    };

    const handleError = ({ error }: { error: string }) => {
      setError(true);
    };

    socket.on("emailVerified", handleVerified);
    socket.on("emailVerificationError", handleError);

    return () => {
      socket.off("emailVerified", handleVerified);
      socket.off("emailVerificationError", handleError);
    };
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å—Ç—Ä–æ–∫–∞–º
  const formatErrorText = (text: string | null) => {
    if (!text) return null;
    return text.split("\n").map((line, index) => <div key={index}>{line}</div>);
  };

  const router = useRouter();

  const handleOnIndex = () => {
    router.push("../");
  };

  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (isVerified)
    return (
      <div className={clsx(styles.container, styles.center)}>
        <div className={styles.content_block}>
          <p className={styles.title}>
            üéâ –ë–∞–º! –ü–æ—á—Ç–∞&nbsp;–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!&nbsp;üöÄ
          </p>
          <p className={styles.description}>
            –í–∞—à email —Ç–µ–ø–µ—Ä—å –Ω–∞&nbsp;—Å–≤—è–∑–∏!&nbsp;üì© –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç—å
            —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ&nbsp;–Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –∏&nbsp;–æ—Ç–∫–ª–∏–∫–∞—Ö
            –æ—Ç&nbsp;—É—á–µ–Ω–∏–∫–æ–≤!&nbsp;üíå<br></br>
            <br></br> –í—Ä–µ–º—è –¥–ª—è&nbsp;–Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
            ‚Äî&nbsp;–Ω–µ&nbsp;–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ!&nbsp;‚è∞
          </p>
          <button
            onClick={() => handleOnIndex()}
            className={clsx(styles.content_block_button, styles.buttonYlw)}
          >
            –ù–∞ –≥–ª–∞–≤–Ω—É—é
          </button>
        </div>
      </div>
    );

  return (
    <div className={clsx(styles.container, styles.center)}>
      <div className={styles.content_block}>
        {error && (
          <>
            <p className={styles.title}>–£–ø—Å,&nbsp;–æ—à–∏–±–∫–∞!&nbsp;üòü</p>{" "}
            <p className={styles.description}>
              –ú—ã –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.<br></br> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ
              –∏–ª–∏&nbsp;—Å–≤—è–∂–∏—Ç–µ—Å—å —Å&nbsp;–Ω–∞–º–∏!&nbsp;üí¨
            </p>
            <button
              onClick={() => handleOnIndex()}
              className={clsx(styles.content_block_button, styles.buttonYlw)}
            >
              –ù–∞ –≥–ª–∞–≤–Ω—É—é
            </button>
          </>
        )}
      </div>
    </div>
  );
}
