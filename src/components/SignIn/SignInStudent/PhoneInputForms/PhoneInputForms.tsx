"use client";
import React, { ChangeEvent, useCallback, useEffect, useState } from "react";
import styles from "../../SignInTutor/SignInTutor.module.css";
import animation from "../../../../app/sign-in-tutor/layout.module.css";
import { useRouter } from "next/navigation";
import clsx from "clsx";
import Image from "next/image";
import ReCaptcha from "@/components/reCapcha/reCapcha";
import { formatPhoneNumber } from "@/utils/phoneFormat/phoneFormat";
import { sendSms } from "@/utils/sensSms/sendSms";
import { securePinGenerator } from "@/utils/securePinGenerator/securePinGenerator";
import {
  fetchCreateUser,
  fetchExistUser,
  fetchUpdSecretUser,
} from "@/api/server/userApi";
import { performActionBasedOnUserExistence } from "@/utils/match/performActionBasedOnUserExistence/performActionBasedOnUserExistence";

interface ComponentRenderProps {
  id: number;
  typeForm: string;
  question: string;
  description: string;
  placeholder: string;
  nextPage: string;
}

type Order = {
  id: number;
  subject?: string;
  goal?: string;
  class?: string;
  deadline?: string;
  [key: string]: any;
};

export const PhoneInputForms: React.FC<ComponentRenderProps> = ({
  id,
  typeForm,
  question,
  description,
  placeholder,
  nextPage,
}) => {
  const route = useRouter();
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –ø–æ–ª–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [inputValue, setInputValue] = useState("");
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏
  const [errorInput, setErrorInput] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è reCaptcha
  const [verified, setVerified] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [isFocused, setIsFocused] = useState(false);
  // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [to, setTo] = useState("");

  const initialTimeLS = localStorage.getItem("confirm-time"); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
  const initialTime = initialTimeLS
    ? JSON.parse(initialTimeLS)
    : { minutes: 0, seconds: 0, index: 0 };

  const [minutes, setMinutes] = useState(initialTime.minutes); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∏–Ω—É—Ç
  const [seconds, setSeconds] = useState(initialTime.seconds); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ–∫—É–Ω–¥
  const [index, setIndex] = useState(initialTime.index); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const [isTimerActive, setIsTimerActive] = useState(true);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–µ–¥—É—â–∏—Ö –Ω—É–ª–µ–π –∫ —á–∏—Å–ª–∞–º –º–µ–Ω—å—à–µ 10
  const formatTime = (time: number) => {
    return time < 10 ? `0${time}` : time;
  };

  // –ö–ª–∞–¥–µ–º –≤ LS –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ to
  useEffect(() => {
    if (to) {
      localStorage.setItem("origin-phone", JSON.stringify(to));
    }
  }, [to]);

  useEffect(() => {
    let interval = setInterval(() => {
      // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
      if (seconds > 0) {
        setSeconds(seconds - 1);
      }
      if (seconds === 0) {
        if (minutes === 0) {
          setIsTimerActive(false);
          clearInterval(interval);
          // –î–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Ç–∞–π–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è)
        } else {
          setMinutes(minutes - 1);
          setSeconds(59);
        }
      }
    }, 1000);

    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => clearInterval(interval);
  }, [minutes, seconds]);

  useEffect(() => {
    const confirmTime = {
      minutes,
      seconds,
      index,
    };
    localStorage.setItem("confirm-time", JSON.stringify(confirmTime));
  }, [minutes, seconds, index]);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SMS
  const onClickSms = async () => {
    const existUser = await fetchExistUser(to);

    if (existUser) {
      setErrorInput(true);
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥
    const confirmCode = securePinGenerator();
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –µ—Å–ª–∏ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥, –µ—Å–ª–∏ –Ω–µ—Ç - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
    performActionBasedOnUserExistence(to, confirmCode);

    // –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ –≤ LocalStorage (–ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª –°–ú–°)
    localStorage.setItem("confirm-code", JSON.stringify(confirmCode));
    sendSms(to, confirmCode);
    handleNextStep(nextPage, inputValue, to);
    if (index === 0) {
      setMinutes(0);
      setSeconds(59);
      setIndex(1);
    }
    if (index === 1) {
      setMinutes(1);
      setSeconds(59);
      setIndex(2);
    }
    if (index === 2) {
      setMinutes(4);
      setSeconds(59);
      setIndex(3);
    }
    if (index >= 3) {
      setMinutes(14);
      setSeconds(59);
      setIndex(4);
    }
    if (index >= 4) {
      setMinutes(29);
      setSeconds(59);
    }
    const confirmTime = {
      minutes,
      seconds,
      index,
    };
    localStorage.setItem("confirm-time", JSON.stringify(confirmTime));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è reCaptcha
  const handleVerify = (token: string | null) => {
    setVerified(!!token);
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –ø–æ–ª–µ –∏–Ω–ø—É—Ç–∞
  const handleInputValue = (e: ChangeEvent<HTMLInputElement>) => {
    const formattedPhoneNumber = formatPhoneNumber(e.target.value);
    setInputValue(formattedPhoneNumber.formatted);
    setErrorInput(false);
    setTo(formattedPhoneNumber.original);
  };

  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);

  // –î–æ—Å—Ç–∞–µ–º –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏
  const getDataUserLS = localStorage.getItem("current-user");
  const dataUser: Order[] = getDataUserLS ? JSON.parse(getDataUserLS) : [];
  // –î–æ—Å—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
  const getOriginPhone = localStorage.getItem("origin-phone");
  const originPhone: string = getOriginPhone && JSON.parse(getOriginPhone);

  const containsClassProperty =
    dataUser && dataUser.some((obj) => obj.hasOwnProperty(typeForm));

  const handleNextStep = useCallback(
    (link: string, inputValue: string, originValue: string) => {
      setIsDisabled(true);
      setIsVisible(false);

      const newData = {
        id: id,
        [typeForm]: inputValue,
      };

      if (containsClassProperty) {
        const indexOfArray = dataUser.findIndex((obj) =>
          obj.hasOwnProperty(typeForm)
        );
        const filterDataUser = dataUser.filter(
          (obj, index) => index < indexOfArray
        );
        const dataToSave = [...filterDataUser, newData];
        localStorage.setItem("current-user", JSON.stringify(dataToSave));
      } else {
        const dataToSave = [newData];
        localStorage.setItem("current-user", JSON.stringify(dataToSave));
      }

      setTimeout(() => route.push(link), 400);
    },
    [route, typeForm]
  );

  const handlePrevStep = () => {
    setIsDisabled(true);
    setIsVisible(false);
    setTimeout(() => route.back(), 400);
  };

  const [isVisible, setIsVisible] = useState(false);
  const [isDisabled, setIsDisabled] = useState(false);

  useEffect(() => {
    setIsVisible(true);
  }, []);

  useEffect(() => {
    const currentDataUser = dataUser && dataUser.find((obj) => obj.id === id);
    const valueProperty = currentDataUser ? currentDataUser[typeForm] : "";
    const valuePropertyOrigin = originPhone ? originPhone : "";
    setInputValue(valueProperty);
    setTo(valuePropertyOrigin);
  }, [typeForm]);

  return (
    <>
      <div
        className={`${styles.container} ${
          isVisible ? animation.visible : animation.hidden
        }`}
      >
        <div className={styles.wrap}>
          <div onClick={handlePrevStep} className={styles.wrapIcon}>
            <Image
              width={20}
              height={20}
              alt="–ù–∞–∑–∞–¥"
              src="/img/icon/CaretLeft.svg"
              className={styles.iconBack}
            />
            –ù–∞–∑–∞–¥
          </div>
          <div className={styles.title}>{question}</div>
          <div className={styles.description}>{description}</div>
          <div className={styles.inputContainer}>
            <span
              className={clsx(styles.inputPhoneNumberPrefix, {
                [styles.visible]: isFocused || inputValue.length > 0,
              })}
            >
              +7
            </span>
            <input
              id="studentPhoneNumber"
              type="tel"
              placeholder={placeholder}
              autoComplete="off"
              value={inputValue}
              onChange={handleInputValue}
              onFocus={handleFocus}
              onBlur={handleBlur}
              className={clsx(styles.inputPhoneNumber, {
                [styles.focused]: isFocused || inputValue.length > 0,
                [styles.errorInput]: errorInput,
              })}
              maxLength={15}
            />
          </div>
          {errorInput && (
            <div className={styles.errorInputText}>
              –û–π! –ö–∞–∂–µ—Ç—Å—è, —É—á–µ–Ω–∏–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§î <br></br>
              –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ—â—ë —Ä–∞–∑ ‚Äî –≤–¥—Ä—É–≥ –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ–ø–µ—á–∞—Ç–∫–∞! ‚ú®
            </div>
          )}
          <div
            className={clsx(
              styles.sendAgainContainer,
              isTimerActive && (minutes !== 0 || seconds !== 0)
                ? ""
                : styles.sendAgainActive
            )}
          >
            {isTimerActive && (minutes !== 0 || seconds !== 0) ? (
              `–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${formatTime(minutes)}:
            ${formatTime(seconds)}`
            ) : (
              <div className={styles.reCaptchaContainer}>
                <ReCaptcha onVerify={handleVerify} />
              </div>
            )}
          </div>
        </div>
        <div className={styles.wrapButton}>
          <button
            type="button"
            onClick={onClickSms}
            className={styles.continueButton}
            disabled={inputValue.length < 15 || errorInput || !verified}
          >
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
          </button>
        </div>
      </div>
    </>
  );
};
