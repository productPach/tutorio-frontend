"use client";
import generalStyles from "../../../app/student/layout.module.css";
import styles from "../Order/Order.module.css";
import { SpinnerOrders } from "@/components/Spinner/SpinnerOrders";
import clsx from "clsx";
import { City, Order, Student, Tutor } from "@/types/types";
import Image from "next/image";
import { host, port } from "@/api/server/configApi";
import Lightbox, { SlideImage } from "yet-another-react-lightbox";
import "yet-another-react-lightbox/styles.css";
import { useEffect, useState } from "react";
import { formatTimeAgo } from "@/utils/date/date";
import { useAppDispatch, useAppSelector } from "@/store/store";
import {
  setIsModalResponseStudentToTutor,
  setTutorIdForResponseStudentToTutor,
} from "@/store/features/modalSlice";
import Link from "next/link";
import {
  setComponentMenu,
  updateScrollPosition,
} from "@/store/features/orderSlice";
import { setChat } from "@/store/features/chatSlice";

type OrderProps = {
  tutorsForOrder: Tutor[];
  citiesAndRegions: City[];
  loading: boolean;
  student: Student | null;
  orderById: Order | null;
  error: string | null;
  locations: City[];
};

export const TutorsComponent = ({
  tutorsForOrder,
  citiesAndRegions,
  loading,
  student,
  orderById,
  error,
}: OrderProps) => {
  const dispatch = useAppDispatch();
  const [openLightboxIndex, setOpenLightboxIndex] = useState<number | null>(
    null
  );
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–æ–≤ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  const slidesPerTutor: SlideImage[][] = tutorsForOrder.map((tutor) =>
    tutor.educations.flatMap((diplom) =>
      diplom.isShowDiplom
        ? diplom.educationDiplomUrl
            .slice(0, 6) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 6
            .map((imgDiplom) => ({
              src: `${host}${port}${imgDiplom}`,
            }))
        : []
    )
  );

  const handleImageClick = (tutorIndex: number, imageIndex: number) => {
    setCurrentImageIndex(imageIndex); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setOpenLightboxIndex(tutorIndex); // –û—Ç–∫—Ä—ã–≤–∞–µ–º Lightbox –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  };

  const handleClose = () => {
    setOpenLightboxIndex(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º Lightbox
  };

  const { scrollPosition, scrollHeight } = useAppSelector(
    (state) => state.orders
  );

  useEffect(() => {
    dispatch(setComponentMenu(2));
    setTimeout(() => {
      window.scrollTo({
        top: scrollPosition,
        behavior: "smooth", // –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
      });
    }, 500); // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
  }, []);

  // –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
  const saveScrollPosition = () => {
    const scrollPosition = window.scrollY;
    const scrollHeight = document.documentElement.scrollHeight; // –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
    dispatch(updateScrollPosition({ scrollPosition, scrollHeight }));
  };

  if (loading && !student?.name)
    return (
      <div className={generalStyles.container__spinner}>
        <div className={generalStyles.spinner}>
          <SpinnerOrders />
        </div>
      </div>
    );

  if (error) return <div>–í–∏–¥–∏–º–æ, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ</div>;

  return (
    <>
      {tutorsForOrder.length > 0 ? (
        tutorsForOrder.map((tutor, tutorIndex) => {
          const avatars = [
            "/img/icon/student/avatar/animal1.svg",
            "/img/icon/student/avatar/animal2.svg",
            "/img/icon/student/avatar/animal3.svg",
            "/img/icon/student/avatar/animal4.svg",
            "/img/icon/student/avatar/animal5.svg",
            "/img/icon/student/avatar/animal6.svg",
            "/img/icon/student/avatar/animal7.svg",
          ];

          const randomAvatar =
            avatars[Math.floor(Math.random() * avatars.length)];
          const tutorAvatar = tutor.avatarUrl
            ? `${host}${port}${tutor.avatarUrl}`
            : randomAvatar;

          const regionIndex = citiesAndRegions.findIndex(
            (location) => location.title === tutor.region
          );

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
          const currentTime = new Date();

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
          const lastOnlineTime = tutor.lastOnline
            ? new Date(tutor.lastOnline)
            : null;

          let onlineStatus = "";
          let timeDifference = 0;

          if (lastOnlineTime) {
            timeDifference = currentTime.getTime() - lastOnlineTime.getTime(); // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            if (timeDifference <= 5 * 60 * 1000) {
              onlineStatus = "–í —Å–µ—Ç–∏";
            } else {
              onlineStatus = `–±—ã–ª ${formatTimeAgo(lastOnlineTime)}`;
            }
          }

          let hasPassportValid = null;
          let hasGoodReviews = null;
          let hasDocsEducation = null;
          if (tutor.badges.length > 0) {
            if (tutor.badges.includes("–ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω")) {
              hasPassportValid = (
                <div className={styles.passportControl}>
                  ‚úÖ&nbsp;–ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω
                </div>
              );
            }
            if (tutor.badges.includes("–•–æ—Ä–æ—à–∏–µ –æ—Ç–∑—ã–≤—ã")) {
              hasGoodReviews = (
                <div className={styles.goodReviews}>‚ù§Ô∏è&nbsp;–•–æ—Ä–æ—à–∏–µ –æ—Ç–∑—ã–≤—ã</div>
              );
            }
            if (tutor.badges.includes("–î–æ–∫—É–º–µ–Ω—Ç—ã –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏")) {
              hasDocsEducation = (
                <div className={styles.docsEducation}>ü™™&nbsp;–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</div>
              );
            }
          }

          // –§–∏–ª—å—Ç—Ä—É–µ–º —Ü–µ–Ω—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–∫–∞–∑–∞
          const relevantPrices = tutor.subjectPrices.filter(
            (price) => price.subjectId === orderById?.subject
          );

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á–∞—Ç —Å —ç—Ç–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º
          const hasChatWithTutor = orderById?.chats.some(
            (chat) => chat.tutorId === tutor.id
          );
          const chat = orderById?.chats.find(
            (chat) => chat.tutorId === tutor.id
          );

          return (
            <div
              key={tutor.id}
              className={clsx(
                generalStyles.content_block,
                generalStyles.order_block,
                generalStyles.crsr_pntr,
                styles.order_gap
              )}
            >
              <div className={styles.tutorImgFioContainer}>
                <div className={styles.flex1}>
                  <Link
                    href={`./${orderById?.id}/tutor/${tutor.id}`}
                    onClick={() => {
                      saveScrollPosition();
                      dispatch(setComponentMenu(4));
                    }} // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
                  >
                    <Image
                      className={styles.tutorImg}
                      src={tutorAvatar}
                      width={120}
                      height={120}
                      alt=""
                    />
                  </Link>
                </div>
                <div className={styles.flex4}>
                  <div
                    className={clsx(styles.containerFlxRw, styles.jtfCntSpBtwn)}
                  >
                    <Link
                      href={`./${orderById?.id}/tutor/${tutor.id}`}
                      onClick={() => {
                        saveScrollPosition();
                        dispatch(setComponentMenu(4));
                      }} // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∫–ª–∏–∫–µ
                    >
                      <h3>{tutor.name}</h3>
                    </Link>
                    {onlineStatus && timeDifference <= 5 * 60 * 1000 && (
                      <div className={styles.containerIsOnline}>
                        <div className={styles.isOnline}></div>
                        <span>{onlineStatus}</span>
                      </div>
                    )}
                  </div>

                  <div className={clsx(styles.containerIsOnline, styles.mt6px)}>
                    <Image
                      src="../../img/icon/location.svg"
                      alt="–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
                      width={15}
                      height={18}
                      className={styles.header_geoImage}
                    />
                    <span>{`${citiesAndRegions[regionIndex]?.title} –∏ ${citiesAndRegions[regionIndex]?.area}`}</span>
                  </div>
                  {tutor.tutorPlace.length > 0 && (
                    <div
                      className={clsx(styles.containerIsOnline, styles.mt6px)}
                    >
                      {tutor.tutorPlace.includes("1") && (
                        <>
                          –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ&nbsp;üñ•Ô∏è
                          {tutor.tutorPlace.length > 1 && " // "}
                        </>
                      )}
                      {tutor.tutorPlace.includes("2") && (
                        <>
                          –£ —Å–µ–±—è&nbsp;üè†
                          {tutor.tutorPlace.includes("3") && " // "}
                        </>
                      )}
                      {tutor.tutorPlace.includes("3") && (
                        <>–í—ã–µ–∑–¥ –∫ —É—á–µ–Ω–∏–∫—É&nbsp;üìç</>
                      )}
                    </div>
                  )}
                  <div className={clsx(styles.containerIsOnline, styles.mt6px)}>
                    {hasPassportValid}
                    {hasGoodReviews}
                    {hasDocsEducation}
                  </div>
                </div>
              </div>

              {tutor.profileInfo && (
                <div className={styles.containerOrderInfo}>
                  <span className={styles.titleTutorInfo}>–û —Å–µ–±–µ</span>
                  <div className={styles.profileInfoText}>
                    {tutor.profileInfo.length > 450
                      ? `${tutor.profileInfo.slice(0, 450)}...`
                      : tutor.profileInfo}
                  </div>
                </div>
              )}

              {tutor.educations.length > 0 && (
                <div className={styles.containerOrderInfo}>
                  <span className={styles.titleTutorInfo}>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</span>

                  <ul>
                    {tutor.educations.map((education) => (
                      <li key={education.id} className={styles.listEducation}>
                        {education.educationInfo} (
                        {education.educationStartYear}-
                        {education.educationEndYear})
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {slidesPerTutor[tutorIndex].length > 0 && (
                <div className={styles.containerOrderInfo}>
                  <span className={styles.titleTutorInfo}>
                    –î–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                  </span>

                  <div
                    className={clsx(
                      styles.containerFlxRw,
                      styles.flxWrp,
                      slidesPerTutor[tutorIndex].length > 5 &&
                        styles.jtfCntSpBtwn,
                      styles.gap10
                    )}
                  >
                    {slidesPerTutor[tutorIndex]
                      .slice(0, 6)
                      .map((slide, index) => (
                        <Image
                          key={index}
                          onClick={() => handleImageClick(tutorIndex, index)}
                          src={slide.src}
                          alt="–î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
                          width={100}
                          height={100}
                          className={styles.imageDiplomas}
                        />
                      ))}
                  </div>
                </div>
              )}

              {relevantPrices.length > 0 && (
                <div className={styles.containerOrderInfo}>
                  <span className={styles.titleTutorInfo}>
                    –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π
                  </span>

                  <table className={generalStyles.table}>
                    <tbody>
                      {relevantPrices.map((price) => (
                        <tr key={price.id} className={generalStyles.tr}>
                          <td className={generalStyles.td}>
                            {price.format === "online" && "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ"}
                            {price.format === "home" && "–£ —Å–µ–±—è –¥–æ–º–∞"}
                            {price.format === "travel" && "–í—ã–µ–∑–¥ –∫ —É—á–µ–Ω–∏–∫—É"}
                            {price.format === "group" && "–í –≥—Ä—É–ø–ø–µ"}
                          </td>
                          <td className={generalStyles.td}>
                            <b>{price.price} ‚ÇΩ</b>{" "}
                            <span className={generalStyles.text14px}>
                              –∑–∞ {price.duration} –º–∏–Ω—É—Ç
                            </span>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}

              <button
                onClick={(e) => {
                  e.preventDefault();

                  // –ï—Å–ª–∏ —á–∞—Ç —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                  if (hasChatWithTutor && chat) {
                    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞
                    dispatch(setComponentMenu(5));
                    dispatch(setChat(chat));
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                  } else {
                    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ—Ç)
                    dispatch(setIsModalResponseStudentToTutor(true));
                    dispatch(setTutorIdForResponseStudentToTutor(tutor.id));
                    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
                  }
                }}
                className={clsx(
                  generalStyles.content_block_button,
                  {
                    [generalStyles.buttonBlc]: hasChatWithTutor, // –ï—Å–ª–∏ chat —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –µ—Å—Ç—å, –¥–æ–±–∞–≤–∏–º —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
                    [generalStyles.buttonYlw]: !hasChatWithTutor, // –î–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–µ—Ç —á–∞—Ç–∞ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∂–µ–ª—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞
                  },
                  generalStyles.buttonWthCnt, // –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –≤—Å–µ–≥–¥–∞ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
                  generalStyles.agnCntr
                )}
              >
                {hasChatWithTutor ? "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç" : "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫–∞–∑"}
              </button>
            </div>
          );
        })
      ) : (
        <div
          className={clsx(
            generalStyles.content_block,
            generalStyles.order_block,
            generalStyles.crsr_pntr,
            styles.order_gap
          )}
        >
          <div className={styles.containerOrderInfo}>
            <div className={styles.subjectName}>
              <h3>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ üòî</h3>
            </div>
            <div className={styles.goal}>
              –°–µ–π—á–∞—Å –Ω–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –≤–∞—à –∑–∞–ø—Ä–æ—Å.
              <br></br>
              <br></br>
              –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å
              –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–π, –µ—Å–ª–∏ —ç—Ç–æ —É–¥–æ–±–Ω–æ. –¢–∞–∫ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ
              —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –±—É–¥–µ—Ç –ø—Ä–æ—â–µ! üéØ
            </div>
          </div>
        </div>
      )}

      {openLightboxIndex !== null && (
        <Lightbox
          open={openLightboxIndex !== null}
          close={handleClose}
          slides={slidesPerTutor[openLightboxIndex]}
          index={currentImageIndex}
        />
      )}
    </>
  );
};
