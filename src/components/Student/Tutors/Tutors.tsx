"use client";
import generalStyles from "../../../app/student/layout.module.css";
import styles from "../Order/Order.module.css";
import { SpinnerOrders } from "@/components/Spinner/SpinnerOrders";
import clsx from "clsx";
import { City, Order, Student, Tutor } from "@/types/types";
import Image from "next/image";
import { host, port } from "@/api/server/configApi";
import Lightbox, { SlideImage } from "yet-another-react-lightbox";
import "yet-another-react-lightbox/styles.css";
import { useState } from "react";
import { formatTimeAgo } from "@/utils/date/date";

type OrderProps = {
  tutorsForOrder: Tutor[];
  citiesAndRegions: City[];
  loading: boolean;
  student: Student | null;
  orderById: Order | null;
  error: string | null;
  locations: City[];
};

export const TutorsComponent = ({
  tutorsForOrder,
  citiesAndRegions,
  loading,
  student,
  orderById,
  error,
  locations,
}: OrderProps) => {
  const [openLightboxIndex, setOpenLightboxIndex] = useState<number | null>(
    null
  );
  const [currentImageIndex, setCurrentImageIndex] = useState(0);

  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
  const slidesPerTutor: SlideImage[][] = tutorsForOrder.map((tutor) =>
    tutor.educations.flatMap((diplom) =>
      diplom.isShowDiplom
        ? diplom.educationDiplomUrl.map((imgDiplom) => ({
            src: `${host}${port}${imgDiplom}`,
          }))
        : []
    )
  );

  const handleImageClick = (tutorIndex: number, imageIndex: number) => {
    setCurrentImageIndex(imageIndex); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    setOpenLightboxIndex(tutorIndex); // –û—Ç–∫—Ä—ã–≤–∞–µ–º Lightbox –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
  };

  const handleClose = () => {
    setOpenLightboxIndex(null); // –ó–∞–∫—Ä—ã–≤–∞–µ–º Lightbox
  };

  if (loading && !student?.name)
    return (
      <div className={generalStyles.container__spinner}>
        <div className={generalStyles.spinner}>
          <SpinnerOrders />
        </div>
      </div>
    );

  if (error) return <div>–í–∏–¥–∏–º–æ, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ</div>;

  return (
    <>
      {tutorsForOrder.map((tutor, tutorIndex) => {
        const avatars = [
          "/img/icon/student/avatar/animal1.svg",
          "/img/icon/student/avatar/animal2.svg",
          "/img/icon/student/avatar/animal3.svg",
          "/img/icon/student/avatar/animal4.svg",
          "/img/icon/student/avatar/animal5.svg",
          "/img/icon/student/avatar/animal6.svg",
          "/img/icon/student/avatar/animal7.svg",
        ];

        const randomAvatar =
          avatars[Math.floor(Math.random() * avatars.length)];
        const tutorAvatar = tutor.avatarUrl
          ? `${host}${port}${tutor.avatarUrl}`
          : randomAvatar;

        const regionIndex = citiesAndRegions.findIndex(
          (location) => location.title === tutor.region
        );

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        const currentTime = new Date();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ–Ω–ª–∞–π–Ω –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        const lastOnlineTime = tutor.lastOnline
          ? new Date(tutor.lastOnline)
          : null;

        let onlineStatus = "";
        let timeDifference = 0;

        if (lastOnlineTime) {
          timeDifference = currentTime.getTime() - lastOnlineTime.getTime(); // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
          if (timeDifference <= 5 * 60 * 1000) {
            onlineStatus = "–í —Å–µ—Ç–∏";
          } else {
            onlineStatus = `–±—ã–ª ${formatTimeAgo(lastOnlineTime)}`;
          }
        }

        return (
          <div
            key={tutor.id}
            className={clsx(
              generalStyles.content_block,
              generalStyles.order_block,
              generalStyles.crsr_pntr,
              styles.order_gap
            )}
          >
            <div className={styles.tutorImgFioContainer}>
              <div className={styles.flex1}>
                <Image
                  className={styles.tutorImg}
                  src={tutorAvatar}
                  width={120}
                  height={120}
                  alt=""
                />
              </div>
              <div className={styles.flex4}>
                <div
                  className={clsx(styles.containerFlxRw, styles.jtfCntSpBtwn)}
                >
                  <h3>{tutor.name}</h3>
                  {onlineStatus && timeDifference <= 5 * 60 * 1000 && (
                    <div className={styles.containerIsOnline}>
                      <div className={styles.isOnline}></div>
                      <span>{onlineStatus}</span>
                    </div>
                  )}
                </div>

                <div className={clsx(styles.containerIsOnline, styles.mt6px)}>
                  <Image
                    src="../../img/icon/location.svg"
                    alt="–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è"
                    width={15}
                    height={18}
                    className={styles.header_geoImage}
                  />
                  <span>{`${citiesAndRegions[regionIndex]?.title} –∏ ${citiesAndRegions[regionIndex]?.area}`}</span>
                </div>
                {tutor.tutorPlace.length > 0 && (
                  <div className={clsx(styles.containerIsOnline, styles.mt6px)}>
                    {tutor.tutorPlace.includes("1") && (
                      <>
                        –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ&nbsp;üñ•Ô∏è
                        {tutor.tutorPlace.length > 1 && " // "}
                      </>
                    )}
                    {tutor.tutorPlace.includes("2") && (
                      <>
                        –£ —Å–µ–±—è&nbsp;üè†
                        {tutor.tutorPlace.includes("3") && " // "}
                      </>
                    )}
                    {tutor.tutorPlace.includes("3") && (
                      <>–í—ã–µ–∑–¥ –∫ —É—á–µ–Ω–∏–∫—É&nbsp;üìç</>
                    )}
                  </div>
                )}
                <div className={clsx(styles.containerIsOnline, styles.mt6px)}>
                  <div className={styles.passportControl}>
                    ‚úÖ&nbsp;–ü–∞—Å–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω
                  </div>
                </div>
              </div>
            </div>

            {tutor.profileInfo && (
              <div className={styles.containerOrderInfo}>
                <span className={styles.titleTutorInfo}>–û —Å–µ–±–µ</span>
                <div className={styles.profileInfoText}>
                  {tutor.profileInfo}
                </div>
              </div>
            )}

            {tutor.educations.length > 0 && (
              <div className={styles.containerOrderInfo}>
                <span className={styles.titleTutorInfo}>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</span>

                <ul>
                  {tutor.educations.map((education) => (
                    <li key={education.id} className={styles.listEducation}>
                      {education.educationInfo} ({education.educationStartYear}-
                      {education.educationEndYear})
                    </li>
                  ))}
                </ul>
              </div>
            )}

            {slidesPerTutor[tutorIndex].length > 0 && (
              <div className={styles.containerOrderInfo}>
                <span className={styles.titleTutorInfo}>
                  –î–∏–ø–ª–æ–º, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ –¥—Ä—É–≥–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                </span>

                <div className={clsx(styles.containerFlxRw, styles.gap10)}>
                  {slidesPerTutor[tutorIndex].map((slide, index) => (
                    <Image
                      key={index}
                      onClick={() => handleImageClick(tutorIndex, index)}
                      src={slide.src}
                      alt="–î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
                      width={100}
                      height={100}
                      className={styles.imageDiplomas}
                    />
                  ))}
                </div>
              </div>
            )}

            <div className={styles.containerOrderInfo}>
              <span className={styles.titleTutorInfo}>–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏–π</span>

              <div>
                <span className={styles.priceInt}>3&nbsp;000 ‚ÇΩ</span> / 60 –º–∏–Ω
                (–¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ)
              </div>
            </div>

            <button
              className={clsx(
                generalStyles.content_block_button,
                generalStyles.buttonYlw
              )}
            >
              –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–∫–∞–∑
            </button>
          </div>
        );
      })}

      {openLightboxIndex !== null && (
        <Lightbox
          open={openLightboxIndex !== null}
          close={handleClose}
          slides={slidesPerTutor[openLightboxIndex]}
          index={currentImageIndex}
        />
      )}
    </>
  );
};
