"use client";

import { useAppDispatch, useAppSelector } from "@/store/store";
import styles from "../../../Tutor/Modal/Profil/Fio/Fio.module.css";
import buttonStyles from "../../../../app/tutor/button.module.css";
import componentStyles from "../../../Tutor/Modal/Profil/Education/Education.module.css";
import profileInfoStyles from "../../../Tutor/Modal/Profil/ProfileInfo/ProfileInfo.module.css";
import { setIsModalDelete, setScrollY } from "@/store/features/modalSlice";
import { ChangeEvent, useState } from "react";
import clsx from "clsx";
import { Spinner } from "@/components/Spinner/Spinner";
import {
  deleteStudentRequest,
  resetDeleteRequest,
  updateStudent,
} from "@/store/features/studentSlice";

export const DeleteModal = ({ logout }: { logout: () => void }) => {
  const dispatch = useAppDispatch();
  const token = useAppSelector((state) => state.auth.token);
  const student = useAppSelector((state) => state.student.student); // –ü–æ–ª—É—á–∞–µ–º tutor –∏–∑ Redux
  const deleteRequest = useAppSelector((state) => state.student.deleteRequest);
  const loading = useAppSelector((state) => state.student.loading);

  const handleDeleteRequest = () => {
    if (student && token) {
      dispatch(
        deleteStudentRequest({
          studentId: student?.id,
          answer: inputValue,
          token,
        })
      );
      dispatch(updateStudent({ id: student?.id, token, status: "Deleted" }));
    }
  };
  // –°—Ç–µ–π—Ç –¥–ª—è –∑–Ω–∞–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —Å —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const [inputValue, setInputValue] = useState("");
  const handleInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value;
    setInputValue(value);
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [errorInput, setErrorInput] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [isFocused, setIsFocused] = useState(false);
  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);

  return (
    <>
      {!deleteRequest ? (
        <div>
          <div className={styles.description}>
            –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –ø—Ä–∏–Ω—è–ª–∏ —Ä–µ—à–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç üòû <br></br>
            <br></br>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ—á–µ–º—É –≤—ã —Ä–µ—à–∏–ª–∏ —É–π—Ç–∏ ‚Äî –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ
            –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å Tutorio –ª—É—á—à–µ
          </div>

          <div className={profileInfoStyles.inputContainer}>
            <textarea
              placeholder={
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º —á—Ç–æ –ø–æ—Å–ª—É–∂–∏–ª–æ –ø—Ä–∏—á–∏–Ω–æ–π —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"
              }
              autoComplete="off"
              value={inputValue}
              onChange={handleInputValue}
              onFocus={handleFocus}
              onBlur={handleBlur}
              className={clsx(profileInfoStyles.textarea, {
                [profileInfoStyles.focused]: isFocused,
                [profileInfoStyles.errorInput]: errorInput,
              })}
              maxLength={5000}
            />
          </div>

          <div
            className={clsx(
              componentStyles.containerFlxRw,
              componentStyles.button
            )}
          >
            <button
              disabled={inputValue.length < 5 || loading}
              className={buttonStyles.buttonGr}
              onClick={() => {
                handleDeleteRequest();
              }}
              type="button"
            >
              –£–¥–∞–ª–∏—Ç—å
              {loading && (
                <div className={componentStyles.spinner}>
                  <Spinner />
                </div>
              )}
            </button>
            <button
              className={buttonStyles.buttonBlc}
              onClick={(e) => {
                e.preventDefault();
                dispatch(setIsModalDelete(false));
                dispatch(setScrollY(0));
              }}
              type="button"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </div>
      ) : (
        <div>
          <div className={styles.description}>
            –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π. ‚è≥<br></br>
            <br></br>
            –û–Ω –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–æ —É –≤–∞—Å
            –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –≤ —Ç–µ—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
            <br></br>
            <br></br>
            –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç, –∏ —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–∏—Ç—Å—è
            –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ üíô
          </div>

          <button
            className={buttonStyles.buttonBlc}
            onClick={(e) => {
              e.preventDefault();
              dispatch(setIsModalDelete(false));
              dispatch(setScrollY(0));
              resetDeleteRequest();
              logout();
            }}
            type="button"
          >
            –•–æ—Ä–æ—à–æ
          </button>
        </div>
      )}
    </>
  );
};
