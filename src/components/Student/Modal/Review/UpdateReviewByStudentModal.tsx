"use client";
import { ChangeEvent, useState } from "react";
import { useAppDispatch, useAppSelector } from "@/store/store";
import styles from "../../../Tutor/Modal/Profil/Fio/Fio.module.css";
import buttonStyles from "../../../../app/tutor/button.module.css";
import componentStyles from "../../../Tutor/Modal/Profil/Education/Education.module.css";
import {
  setIsModalUpdateReviewByStudent,
  setIsSheetUpdateReviewByStudent,
  setScrollY,
} from "@/store/features/modalSlice";
import { useChat } from "@/context/ChatContext";
import { sendMessage } from "@/store/features/chatSlice";
import { updateOrder } from "@/store/features/orderSlice";
import { unwrapResult } from "@reduxjs/toolkit";
import { useChatSocket } from "@/hooks/useChatSocket";
import { Spinner } from "@/components/Spinner/Spinner";
import clsx from "clsx";
import { updateReview } from "@/store/features/reviewSlice";

export const UpdateReviewByStudentModal = () => {
  const dispatch = useAppDispatch();
  const reviewId = useAppSelector(
    (state) => state.modal.isReviewIdCreateReview
  );
  const [inputValue, setInputValue] = useState("");
  const handleInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value; // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    setInputValue(value);
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [errorInput, setErrorInput] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);
  const orderById = useAppSelector((state) => state.orders.orderById);
  const tutorId = useAppSelector((state) => state.modal.isValueCreateReview);
  const chat = orderById?.chats.find((chat) => chat.tutorId === tutorId);
  const { loadChats } = useChat();
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
  const [isLoading, setIsLoading] = useState(false);
  const { sendMessageSocket } = useChatSocket(chat?.id ? chat.id : "");

  const handleUpdateReview = async () => {
    try {
      if (!reviewId) return;
      setIsLoading(true);
      await dispatch(
        updateReview({
          id: reviewId,
          payload: {
            message: inputValue,
          },
        })
      ).unwrap();

      if (orderById) {
        await dispatch(
          updateOrder({
            id: orderById.id,
            status: orderById.status,
          })
        ).unwrap();
        if (!chat) return;
        const actionResult = await dispatch(
          sendMessage({
            chatId: chat.id,
            senderId: orderById.studentId,
            orderId: orderById.id,
            themeOrder: `–Ω–µ –Ω—É–∂–Ω–æ`,
            text: `üí¨\u00A0–£—á–µ–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤\n\
            –í—ã\u00A0–ø–æ–ª—É—á–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫\u00A0–æ—Ü–µ–Ω–∫–µ: \n"${inputValue}"`,
            type: "service",
            recipientRole: "tutor",
          })
        );
        const newMessage = unwrapResult(actionResult);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
        sendMessageSocket(newMessage); // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
        // // await loadChats();
      }

      handleClose();
      setIsLoading(false);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", err);
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    dispatch(setIsModalUpdateReviewByStudent(false));
    dispatch(setIsSheetUpdateReviewByStudent(false));
    dispatch(setScrollY(0));
  };

  return (
    <>
      <div className={styles.description2}>
        {/* –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ&nbsp;–±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º,
        –∞&nbsp;—á—Ç–æ&nbsp;‚Äî&nbsp;–Ω–µ&nbsp;—Å—Ä–∞–±–æ—Ç–∞–ª–æ.
        <br /> */}
        <br />
        –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–µ–Ω–∏–∫–∞–º —Å–¥–µ–ª–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä&nbsp;üí≠
        <br />
        –î–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ&nbsp;–∫–æ—Ä–æ—Ç–∫–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º&nbsp;‚Äî&nbsp;—ç—Ç–æ&nbsp;–æ—Å–æ–±–µ–Ω–Ω–æ
        —Ü–µ–Ω–Ω–æ –¥–ª—è&nbsp;—Ç–µ—Ö, –∫—Ç–æ&nbsp;—Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.
      </div>

      <textarea
        placeholder={
          "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –≤–∞–º –ø–æ–º–æ–≥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä (–∏–ª–∏ –Ω–µ –ø–æ–º–æ–≥) ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö"
        }
        autoComplete="off"
        value={inputValue}
        onChange={handleInputValue}
        onFocus={handleFocus}
        onBlur={handleBlur}
        className={clsx(styles.textarea, {
          [styles.focused]: isFocused,
          [styles.errorInput]: errorInput,
        })}
        maxLength={5000}
      />

      <div className={componentStyles.containerFlxRw}>
        <button
          disabled={isLoading || inputValue.length < 2}
          className={buttonStyles.buttonYlw}
          onClick={handleUpdateReview}
          type="button"
        >
          –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
          {isLoading && (
            <div className={styles.buttonYlSpinner}>
              <Spinner />
            </div>
          )}
        </button>
      </div>
    </>
  );
};
