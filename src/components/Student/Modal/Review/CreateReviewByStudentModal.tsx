"use client";
import { ChangeEvent, useState } from "react";
import { useAppDispatch, useAppSelector } from "@/store/store";
import styles from "../../../Tutor/Modal/Profil/Fio/Fio.module.css";
import buttonStyles from "../../../../app/tutor/button.module.css";
import componentStyles from "../../../Tutor/Modal/Profil/Education/Education.module.css";
import {
  setIsModalCreateReviewByStudent,
  setIsSheetCreateReviewByStudent,
  setScrollY,
} from "@/store/features/modalSlice";
import { useChat } from "@/context/ChatContext";
import { updateOrder } from "@/store/features/orderSlice";
import { Spinner } from "@/components/Spinner/Spinner";
import clsx from "clsx";
import { createReview, updateReview } from "@/store/features/reviewSlice";
import { StarRating } from "@/components/StarRating/StarRating";
import { sendMessage } from "@/store/features/chatSlice";
import { unwrapResult } from "@reduxjs/toolkit";
import { useChatSocket } from "@/hooks/useChatSocket";

export const CreateReviewByStudentModal = () => {
  const dispatch = useAppDispatch();
  const token = useAppSelector((state) => state.auth.token);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [errorInput, setErrorInput] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);
  const orderById = useAppSelector((state) => state.orders.orderById);
  const tutorId = useAppSelector((state) => state.modal.isValueCreateReview);
  const chat = orderById?.chats.find((chat) => chat.tutorId === tutorId);
  const { sendMessageSocket } = useChatSocket(chat?.id ? chat.id : "");
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
  const [isLoading, setIsLoading] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const handleInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value; // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    setInputValue(value);
  };
  const [createdReviewId, setCreatedReviewId] = useState<string | null>(null);
  const [ratingNumb, setRatingNumb] = useState(0);
  const [ratingChosen, setRatingChosen] = useState(false);

  const handleRatingChange = async (value: number) => {
    setRatingNumb(value);
    if (!token || !orderById?.id || !tutorId || createdReviewId) return;
    try {
      setIsLoading(true);
      const review = await dispatch(
        createReview({
          token,
          payload: {
            orderId: orderById?.id,
            studentId: orderById.studentId,
            tutorId: tutorId,
            rating: value,
            authorRole: "student",
          },
        })
      ).unwrap();
      if (orderById) {
        await dispatch(
          updateOrder({
            id: orderById.id,
            token,
            status: orderById.status,
          })
        ).unwrap();
      }

      if (!chat) return;
      let customMessage;
      if (value === 5) {
        customMessage = "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –£—á–µ–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–æ–ª–µ–Ω\u00A0üôå";
      }
      if (value === 4) {
        customMessage =
          "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞\u00A0‚Äî\u00A0–Ω–µ–º–Ω–æ–≥–æ –¥–æ\u00A0—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞\u00A0‚öñÔ∏è";
      }
      if (value === 3) {
        customMessage = "–°—Ä–µ–¥–Ω–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –æ–±—Å—É–¥–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è\u00A0ü§ù";
      }
      if (value === 2) {
        customMessage = "–£\u00A0—É—á–µ–Ω–∏–∫–∞ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã\u00A0ü§î";
      }
      if (value === 1) {
        customMessage =
          "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ\u00A0—Ç–∞–∫... —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥\u00A0üòü";
      }
      const actionResult = await dispatch(
        sendMessage({
          chatId: chat.id,
          senderId: orderById.studentId,
          orderId: orderById.id,
          themeOrder: `–Ω–µ –Ω—É–∂–Ω–æ`,
          text: `üåü\u00A0–£—á–µ–Ω–∏–∫ –æ—Ü–µ–Ω–∏–ª –≤–∞—à—É –ø–æ–º–æ—â—å\n\
            –í—ã\u00A0–ø–æ–ª—É—á–∏–ª–∏ ${value}\u00A0–∏–∑\u00A05\u00A0–∑–≤—ë–∑–¥. ${customMessage}`,
          token,
          type: "service",
          recipientRole: "tutor",
        })
      );
      const newMessage = unwrapResult(actionResult);
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
      sendMessageSocket(newMessage); // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
      // // await loadChats();

      setCreatedReviewId(review.id);
      setRatingChosen(true);
      setIsLoading(false);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:", err);
    }
  };

  const handleUpdateReview = async () => {
    try {
      if (!token || !createdReviewId) return;
      setIsLoading(true);
      await dispatch(
        updateReview({
          token,
          id: createdReviewId,
          payload: {
            message: inputValue,
          },
        })
      ).unwrap();

      if (orderById) {
        await dispatch(
          updateOrder({
            id: orderById.id,
            token,
            status: orderById.status,
          })
        ).unwrap();

        if (!chat) return;
        const actionResult = await dispatch(
          sendMessage({
            chatId: chat.id,
            senderId: orderById.studentId,
            orderId: orderById.id,
            themeOrder: `–Ω–µ –Ω—É–∂–Ω–æ`,
            text: `üí¨\u00A0–£—á–µ–Ω–∏–∫ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤\n\
            –í—ã\u00A0–ø–æ–ª—É—á–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫\u00A0–æ—Ü–µ–Ω–∫–µ: \n"${inputValue}"`,
            token,
            type: "service",
            recipientRole: "tutor",
          })
        );
        const newMessage = unwrapResult(actionResult);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
        sendMessageSocket(newMessage); // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
        // // await loadChats();
      }

      handleClose();
      setIsLoading(false);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", err);
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    dispatch(setIsModalCreateReviewByStudent(false));
    dispatch(setIsSheetCreateReviewByStudent(false));
    dispatch(setScrollY(0));
  };

  return (
    <>
      {!ratingChosen &&
        (isLoading ? (
          <div className={styles.wrapperSpinnerModalReview}>
            <div className={styles.buttonYlSpinner}>
              <Spinner />
            </div>
          </div>
        ) : (
          <div className={styles.description2}>
            <StarRating value={ratingNumb} onChange={handleRatingChange} />
          </div>
        ))}

      {ratingChosen && (
        <>
          <div className={styles.description2}>
            {/* –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ&nbsp;–±—ã–ª–æ –ø–æ–ª–µ–∑–Ω—ã–º,
        –∞&nbsp;—á—Ç–æ&nbsp;‚Äî&nbsp;–Ω–µ&nbsp;—Å—Ä–∞–±–æ—Ç–∞–ª–æ.
        <br /> */}
            <br />
            –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–µ–Ω–∏–∫–∞–º —Å–¥–µ–ª–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä&nbsp;üí≠
            <br />
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ&nbsp;–∫–æ—Ä–æ—Ç–∫–∏–º
            –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º&nbsp;‚Äî&nbsp;—ç—Ç–æ&nbsp;–æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–Ω–æ –¥–ª—è&nbsp;—Ç–µ—Ö,
            –∫—Ç–æ&nbsp;—Å–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.
          </div>

          <textarea
            placeholder={
              "–ù–∞–ø–∏—à–∏—Ç–µ, —á–µ–º –≤–∞–º –ø–æ–º–æ–≥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä (–∏–ª–∏ –Ω–µ –ø–æ–º–æ–≥) ‚Äî —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö"
            }
            autoComplete="off"
            value={inputValue}
            onChange={handleInputValue}
            onFocus={handleFocus}
            onBlur={handleBlur}
            className={clsx(styles.textarea, {
              [styles.focused]: isFocused,
              [styles.errorInput]: errorInput,
            })}
            maxLength={5000}
          />

          <div className={componentStyles.containerFlxRw}>
            <button
              disabled={isLoading || inputValue.length < 2}
              className={buttonStyles.buttonYlw}
              onClick={handleUpdateReview}
              type="button"
            >
              –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
              {isLoading && (
                <div className={styles.buttonYlSpinner}>
                  <Spinner />
                </div>
              )}
            </button>
          </div>
        </>
      )}
    </>
  );
};
