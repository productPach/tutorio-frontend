"use client";

import { useState } from "react";
import { useAppDispatch, useAppSelector } from "@/store/store";
import styles from "../../../Tutor/Modal/Profil/Fio/Fio.module.css";
import buttonStyles from "../../../../app/tutor/button.module.css";
import componentStyles from "../../../Tutor/Modal/Profil/Education/Education.module.css";
import {
  setIsModalCreateContractByStudent,
  setIsModalHiddenOrder,
  setIsSheetCreateContractByStudent,
  setIsSheetHiddenOrder,
  setIsSheetOpen,
  setScrollY,
} from "@/store/features/modalSlice";
import { useChat } from "@/context/ChatContext";
import { createContract } from "@/store/features/contractSlice";
import { sendMessage, updateChatForContract } from "@/store/features/chatSlice";
import { getOrderById, updateOrder } from "@/store/features/orderSlice";
import { unwrapResult } from "@reduxjs/toolkit";
import { useChatSocket } from "@/hooks/useChatSocket";
import { fetchStudentPhoneById } from "@/api/server/studentApi";
import { Spinner } from "@/components/Spinner/Spinner";

export const ReviewsTutorModal = () => {
  const dispatch = useAppDispatch();
  const token = useAppSelector((state) => state.auth.token);
  const chat = useAppSelector((state) => state.chat.chat);
  // –°—Ç–µ–π—Ç –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
  const subjects = useAppSelector((state) => state.subject.subjects);
  const orderById = useAppSelector((state) => state.orders.orderById);
  const { loadChats } = useChat();
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
  const [isLoading, setIsLoading] = useState(false);

  const [step, setStep] = useState<"initial" | "success">("initial");
  const { sendMessageSocket } = useChatSocket(chat?.id ? chat.id : "");

  const handleCreateContract = async () => {
    try {
      if (!token || !chat?.orderId || !chat?.tutorId) return;
      setIsLoading(true);
      const contract = await dispatch(
        createContract({
          token,
          payload: {
            orderId: chat.orderId,
            tutorId: chat.tutorId,
            selectedBy: "student",
          },
        })
      ).unwrap();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∞—Ç —É —É—á–µ–Ω–∏–∫–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
      dispatch(updateChatForContract({ tutorId: contract.tutorId }));

      if (orderById) {
        await dispatch(
          updateOrder({
            id: orderById.id,
            token,
            status: "Hidden",
          })
        ).unwrap();

        const subjectForRequest = subjects.find(
          (item) => item.id_p === orderById?.subject
        )?.for_request;

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞
        const phoneStudent = await fetchStudentPhoneById(
          token,
          orderById.studentId
        );

        const actionResult = await dispatch(
          sendMessage({
            chatId: chat.id,
            senderId: chat.studentId,
            orderId: orderById.id,
            themeOrder: `${orderById.goal} –ø–æ ${subjectForRequest}`,
            text: orderById.autoContactsOnResponse
              ? `–ü–æ–±–µ–¥–∞! –£—á–µ–Ω–∏–∫ –≤—ã–±—Ä–∞–ª –≤–∞—Å\u00A0‚Äî\u00A0—Ç–µ–ø–µ—Ä—å –≤—ã –≤\u00A0–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!
–ñ–µ–ª–∞–µ–º –∫–ª–∞—Å—Å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏\u00A0–∫—Ä—É—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\u00A0üéØ`
              : `–ü–æ–±–µ–¥–∞! –£—á–µ–Ω–∏–∫ –≤—ã–±—Ä–∞–ª –≤–∞—Å\u00A0‚Äî\u00A0—Ç–µ–ø–µ—Ä—å –≤—ã –≤\u00A0–æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ!
            –¢–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞: <a href="tel:+7${phoneStudent}">+7${phoneStudent}</a>\n\n\
–ñ–µ–ª–∞–µ–º –∫–ª–∞—Å—Å–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ –∏\u00A0–∫—Ä—É—Ç—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\u00A0üéØ`,
            token,
            type: "service",
            recipientRole: "tutor",
          })
        );

        const newMessage = unwrapResult(actionResult);
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
        sendMessageSocket(newMessage); // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID
        await loadChats();
        //dispatch(getOrderById({ token, id: chat.orderId }));
      }

      //setStep("success");
      handleClose();
      setIsLoading(false);
      if (window.innerWidth < 769) {
        dispatch(setIsSheetHiddenOrder(true));
      } else {
        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
        dispatch(setIsModalHiddenOrder(true)); // –û—Ç–∫—Ä—ã–≤–∞–µ–º —à—Ç–æ—Ä–∫—É
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:", err);
      setIsLoading(false);
    }
  };

  const handleClose = () => {
    dispatch(setIsModalCreateContractByStudent(false));
    dispatch(setIsSheetCreateContractByStudent(false));
    dispatch(setScrollY(0));
  };

  const handleReopenOrder = async () => {
    if (!orderById || !token) return;
    try {
      await dispatch(
        updateOrder({
          id: orderById.id,
          token,
          status: "Active",
        })
      ).unwrap();
      dispatch(getOrderById({ token, id: orderById.id }));
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞:", err);
    } finally {
      handleClose();
    }
  };

  return (
    <>
      {step === "initial" ? (
        <>
          <div className={styles.description2}>
            ‚úÖ –í—ã–±–∏—Ä–∞–π—Ç–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, <strong>—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏</strong>{" "}
            –≤—ã&nbsp;—É–∂–µ&nbsp; –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –∏–ª–∏&nbsp;–¥–æ–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å
            –æ&nbsp;–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.
            <br />
            <br />
            <ul className={styles.customList}>
              <li>–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å —á–µ—Å—Ç–Ω—ã–º –∏&nbsp;–ø–æ–ª–µ–∑–Ω—ã–º</li>
              <li>–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ&nbsp;–∑–∞–Ω—è—Ç–∏—è—Ö</li>
              <li>
                –í—ã–±–æ—Ä –≤–ª–∏—è–µ—Ç –Ω–∞&nbsp;—Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏&nbsp;–µ–≥–æ –¥–æ–≤–µ—Ä–∏–µ
                –Ω–∞&nbsp;–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
              </li>
            </ul>
          </div>

          <div className={componentStyles.containerFlxRw}>
            <button
              disabled={isLoading}
              className={buttonStyles.buttonYlw}
              onClick={handleCreateContract}
              type="button"
            >
              –í—ã–±—Ä–∞—Ç—å
              {isLoading && (
                <div className={styles.buttonYlSpinner}>
                  <Spinner />
                </div>
              )}
            </button>
            <button
              className={buttonStyles.buttonBlc}
              onClick={handleClose}
              type="button"
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        </>
      ) : (
        <>
          <div className={styles.description2}>
            –ú—ã —Å–∫—Ä—ã–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏
            —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ –æ–±—â–µ–Ω–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º.
            <br />
            <br />
          </div>

          <div className={componentStyles.containerFlxRw}>
            <button
              className={buttonStyles.buttonBlc}
              onClick={handleClose}
              type="button"
            >
              –•–æ—Ä–æ—à–æ
            </button>
            <button
              className={buttonStyles.buttonYlw}
              onClick={handleReopenOrder}
              type="button"
            >
              –ù—É–∂–Ω—ã –µ—â—ë –æ—Ç–∫–ª–∏–∫–∏
            </button>
          </div>
        </>
      )}
    </>
  );
};
