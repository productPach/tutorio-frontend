"use client";

import { useAppDispatch, useAppSelector } from "@/store/store";
import clsx from "clsx";
import styles from "../../../Tutor/Modal/Profil/ProfileInfo/ProfileInfo.module.css";
import stylesStudent from "../../Student.module.css";
import generalStyles from "../../../../app/student/layout.module.css";
import { ChangeEvent, useState } from "react";
import { setIsModalResponseStudentToTutor } from "@/store/features/modalSlice";

export const ResponseStudentToTutorModal = () => {
  const dispatch = useAppDispatch();
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ tutor –∏–∑ Redux
  const token = useAppSelector((state) => state.auth.token);
  const student = useAppSelector((state) => state.student.student);
  const tutorId = useAppSelector(
    (state) => state.modal.tutorIdForResponseStudentToTutor
  );
  // –°—Ç–µ–π—Ç –¥–ª—è –∑–Ω–∞–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —Å —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const [inputValue, setInputValue] = useState("");
  const handleInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value; // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    setInputValue(value);
  };
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [errorInput, setErrorInput] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [isFocused, setIsFocused] = useState(false);
  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);

  const update = () => {
    const messageResponse = inputValue;
    dispatch(setIsModalResponseStudentToTutor(false));
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∏—Ç—á–∞
  const [isChecked, setIsChecked] = useState(true);

  const toggleSwitch = () => {
    setIsChecked((prev) => {
      const newState = !prev;
      return newState;
    });
  };

  return (
    <>
      <div className={styles.description}>
        –û–Ω –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ–≥–æ
        –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üì©
      </div>
      <div className={styles.inputContainer}>
        <textarea
          placeholder={"–õ—é–±–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"}
          autoComplete="off"
          value={inputValue}
          onChange={handleInputValue}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={clsx(styles.textarea, {
            [styles.focused]: isFocused,
            [styles.errorInput]: errorInput,
          })}
          maxLength={5000}
        />
      </div>

      <div className={stylesStudent.containerEntityShowEnd}>
        <div className={stylesStudent.containerEntityTitleDescription}>
          <div className={generalStyles.textBlc}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
          </div>
          <span className={generalStyles.textGr}>
            –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –≤–∞—à –Ω–æ–º–µ—Ä –∏ —Å–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å&nbsp;–≤–∞–º–∏
            –Ω–∞–ø—Ä—è–º—É—é&nbsp;‚òéÔ∏è
          </span>
        </div>
        <div className={stylesStudent.inputContainer}>
          <label className={stylesStudent.iosSwitch}>
            <input
              type="checkbox"
              checked={isChecked}
              onChange={toggleSwitch}
            />
            <span className={stylesStudent.slider}></span>
          </label>
        </div>
      </div>

      <div className={styles.button}>
        <button onClick={update} type="button">
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
        </button>
      </div>
    </>
  );
};
