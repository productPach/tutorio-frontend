"use client";

import { useAppDispatch, useAppSelector } from "@/store/store";
import clsx from "clsx";
import styles from "../Profil/ProfileInfo/ProfileInfo.module.css";
import stylesStudent from "../../../Student/Student.module.css";
import generalStyles from "../../../../app/student/layout.module.css";
import { ChangeEvent, useEffect, useState } from "react";
import {
  setIsModalResponseTutorToStudent,
  setIsSheetResponseTutorToStudent,
  setLoadingPage,
} from "@/store/features/modalSlice";
import {
  createChat,
  getChatsByUserId,
  sendMessage,
  setChat,
} from "@/store/features/chatSlice";
import { useRouter } from "next/navigation";
import { useChat } from "@/context/ChatContext";
import { Spinner } from "@/components/Spinner/Spinner";
import { getAllSubjects } from "@/store/features/subjectSlice";
import { fetchTutorPhoneById } from "@/api/server/tutorApi";

export const ResponseTutorToStudentModal = () => {
  const dispatch = useAppDispatch();
  const route = useRouter();
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ tutor –∏–∑ Redux
  const token = useAppSelector((state) => state.auth.token);
  const order = useAppSelector((state) => state.orders.orderByIdDefault);
  const tutor = useAppSelector((state) => state.tutor.tutor);
  const { sendMessage: sendMessageContext, newChat } = useChat();
  // –°—Ç–µ–π—Ç –¥–ª—è –∑–Ω–∞–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —Å —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const [inputValue, setInputValue] = useState("");
  const handleInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value; // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    setInputValue(value);
  };
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [errorInput, setErrorInput] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
  const [isLoading, setIsLoading] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [valid, setValid] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [isFocused, setIsFocused] = useState(false);
  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);

  const subjects = useAppSelector((state) => state.subject.subjects);

  useEffect(() => {
    dispatch(getAllSubjects());
  }, [dispatch]);

  const subjectForRequest = subjects.find(
    (item) => item.id_p === order?.subject
  )?.for_request;

  const update = async () => {
    setIsLoading(true);
    const messageResponse = inputValue;

    if (
      tutor?.id &&
      order?.studentId &&
      order?.id &&
      token &&
      messageResponse
    ) {
      try {
        const themeOrder = `${order.goal} –ø–æ ${subjectForRequest}`;
        const chat = await dispatch(
          createChat({
            tutorId: tutor.id,
            studentId: order.studentId,
            orderId: order.id,
            initiatorRole: "tutor",
            themeOrder: themeOrder,
            status: "Active",
            token,
          })
        ).unwrap(); // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ createChat

        if (chat?.id) {
          await dispatch(
            sendMessage({
              chatId: chat.id,
              senderId: tutor.id,
              orderId: order.id,
              themeOrder: themeOrder,
              text: messageResponse,
              token,
            })
          ).unwrap();

          if (isChecked) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            const phoneTutor = await fetchTutorPhoneById(token, tutor.id);

            await dispatch(
              sendMessage({
                chatId: chat.id,
                senderId: tutor.id,
                orderId: order.id,
                themeOrder: themeOrder,
                text: `–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞\u00A0–≤–∞—à –∑–∞–∫–∞–∑!\n\
                      –í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å\u00A0–Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é: üìû\u00A0<a href="tel:+7${phoneTutor}">+7${phoneTutor}</a> –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤\u00A0—ç—Ç–æ–º —á–∞—Ç–µ.\n\n\
                      –ï—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ\u00A0–∑–∞–Ω—è—Ç–∏—è—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\u00A0‚Äî\u00A0–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–±—Ä–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞¬ª\u00A0‚úÖ\n\
                      –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ\u00A0—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ\u00A0‚≠ê`,
                token,
                type: "service",
                recipientRole: "student",
              })
            ).unwrap();
          } else {
            await dispatch(
              sendMessage({
                chatId: chat.id,
                senderId: tutor.id,
                orderId: order.id,
                themeOrder: themeOrder,
                text: `–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞\u00A0–≤–∞—à –∑–∞–∫–∞–∑!\n\
                      –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ –≤\u00A0—ç—Ç–æ–º —á–∞—Ç–µ.\n\n\
                      –ï—Å–ª–∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ\u00A0–∑–∞–Ω—è—Ç–∏—è—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\u00A0‚Äî\u00A0–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–±—Ä–∞—Ç—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞¬ª\u00A0‚úÖ\n\
                      –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ\u00A0—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ\u00A0‚≠ê`,
                token,
                type: "service",
                recipientRole: "student",
              })
            ).unwrap();
          }

          // –î–∞–µ–º —Ä–µ–Ω–¥–µ—Ä—É –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—É—à –∏ —Å–µ—Ç
          setTimeout(async () => {
            try {
              //sendMessageContext(chat.id, messageResponse);
              const data = await dispatch(
                getChatsByUserId({ userId: tutor.userId, role: "tutor", token })
              ).unwrap(); // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

              // –ù–∞–π–¥–µ–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
              const chatToSet = data.find((c) => c.id === chat.id); // –∑–∞–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ

              if (chatToSet) {
                dispatch(setChat(chatToSet)); // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ store
                newChat(chat.id); // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–∫–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É —Å—Ç—É–¥–µ–Ω—Ç–∞
              }
              route.push(`/tutor/responses?chatUpdateData=true`);
            } catch (error) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:", error);
            }
          }, 0);
        }
        dispatch(setIsModalResponseTutorToStudent(false));
        dispatch(setIsSheetResponseTutorToStudent(false));
        dispatch(setLoadingPage(true));
      } catch (error: any) {
        const errorMessage = error?.message;
        if (error?.status === 403 && errorMessage?.includes("–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")) {
          setValid(true);
          dispatch(setLoadingPage(false));
          setIsLoading(false);
        } else {
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            error
          );
        }
      }
    }
  };

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∏—Ç—á–∞
  const [isChecked, setIsChecked] = useState(true);

  const toggleSwitch = () => {
    setIsChecked((prev) => {
      const newState = !prev;
      return newState;
    });
  };

  return (
    <>
      <div className={styles.description}>
        –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –µ–≥–æ
        –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç üì©
      </div>
      <div className={styles.inputContainer}>
        <textarea
          placeholder={"–õ—é–±–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"}
          autoComplete="off"
          value={inputValue}
          onChange={handleInputValue}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={clsx(styles.textarea, {
            [styles.focused]: isFocused,
            [styles.errorInput]: errorInput,
          })}
          maxLength={5000}
        />
      </div>

      <div
        className={clsx(stylesStudent.containerEntityShowEnd, styles.mrTp10)}
      >
        <div className={stylesStudent.containerEntityTitleDescription}>
          <div className={generalStyles.textBlc}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫—É
          </div>
          <span className={generalStyles.textGr}>
            –£—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∏—Ç –≤–∞—à –Ω–æ–º–µ—Ä –∏ —Å–º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å&nbsp;–≤–∞–º–∏
            –Ω–∞–ø—Ä—è–º—É—é&nbsp;‚òéÔ∏è
          </span>
        </div>
        <div className={stylesStudent.inputContainer}>
          <label className={stylesStudent.iosSwitch}>
            <input
              type="checkbox"
              checked={isChecked}
              onChange={toggleSwitch}
            />
            <span className={stylesStudent.slider}></span>
          </label>
        </div>
      </div>
      {valid && (
        <p className={styles.error}>
          üì´ –û—Ç–∫–ª–∏–∫ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –£—á–µ–Ω–∏–∫ —É–∂–µ –∑–∞–∫—Ä—ã–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ
          –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∏—ë–º –æ—Ç–∫–ª–∏–∫–æ–≤
          {/* . <br />
          –ù–æ —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–∫, —á—Ç–æ –≤–∞—à –∑–∞–∫–∞–∑ –µ—â—ë
          –≤–ø–µ—Ä–µ–¥–∏! üß≠‚ú® */}
        </p>
      )}

      <div className={styles.button}>
        <button
          disabled={isLoading || valid || inputValue.length < 1}
          onClick={update}
          type="button"
        >
          –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          {isLoading && (
            <div className={styles.buttonYlSpinner}>
              <Spinner />
            </div>
          )}
        </button>
      </div>
    </>
  );
};
