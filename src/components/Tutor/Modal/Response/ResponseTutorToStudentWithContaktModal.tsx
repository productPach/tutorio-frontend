"use client";

import { useAppDispatch, useAppSelector } from "@/store/store";
import clsx from "clsx";
import styles from "../Profil/ProfileInfo/ProfileInfo.module.css";
import { ChangeEvent, useEffect, useState } from "react";
import {
  setIsModalResponseTutorToStudentWithContakt,
  setLoadingPage,
} from "@/store/features/modalSlice";
import {
  createChat,
  getChatsByUserId,
  sendMessage,
  setChat,
} from "@/store/features/chatSlice";
import { useRouter } from "next/navigation";
import { useChat } from "@/context/ChatContext";
import { Spinner } from "@/components/Spinner/Spinner";
import { getAllSubjects } from "@/store/features/subjectSlice";
import { fetchStudentPhoneById } from "@/api/server/studentApi";

export const ResponseTutorToStudentWithContaktModal = () => {
  const dispatch = useAppDispatch();
  const route = useRouter();
  // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ tutor –∏–∑ Redux
  const token = useAppSelector((state) => state.auth.token);
  const order = useAppSelector((state) => state.orders.orderByIdDefault);
  const tutor = useAppSelector((state) => state.tutor.tutor);
  const { newChat } = useChat();
  // –°—Ç–µ–π—Ç –¥–ª—è –∑–Ω–∞–µ–Ω–∏—è –∏–Ω–ø—É—Ç–∞ —Å —Å—É–º–º–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  const [inputValue, setInputValue] = useState("");
  const handleInputValue = (e: ChangeEvent<HTMLTextAreaElement>) => {
    const value = e.target.value; // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    setInputValue(value);
  };
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
  const [errorInput, setErrorInput] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
  const [isLoading, setIsLoading] = useState(false);
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  const [valid, setValid] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –ø–æ–ª–µ —Å –≤–≤–æ–¥–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  const [isFocused, setIsFocused] = useState(false);
  const handleFocus = () => setIsFocused(true);
  const handleBlur = () => setIsFocused(false);

  const subjects = useAppSelector((state) => state.subject.subjects);

  useEffect(() => {
    dispatch(getAllSubjects());
  }, [dispatch]);

  const subjectForRequest = subjects.find(
    (item) => item.id_p === order?.subject
  )?.for_request;

  const update = async () => {
    setIsLoading(true);
    const messageResponse = inputValue;

    if (
      tutor?.id &&
      order?.studentId &&
      order?.id &&
      token &&
      messageResponse
    ) {
      try {
        const themeOrder = `${order.goal} –ø–æ ${subjectForRequest}`;
        const chat = await dispatch(
          createChat({
            tutorId: tutor.id,
            studentId: order.studentId,
            orderId: order.id,
            initiatorRole: "tutor",
            themeOrder: themeOrder,
            status: "Active",
            token,
          })
        ).unwrap(); // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ createChat

        if (chat?.id) {
          await dispatch(
            sendMessage({
              chatId: chat.id,
              senderId: tutor.id,
              orderId: order.id,
              themeOrder: themeOrder,
              text: messageResponse,
              token,
            })
          ).unwrap();

          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞
          const phoneStudent = await fetchStudentPhoneById(
            token,
            order.studentId
          );

          await dispatch(
            sendMessage({
              chatId: chat.id,
              senderId: tutor.id,
              orderId: order.id,
              themeOrder: themeOrder,
              text: `–¢–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞: <a href="tel:+7${phoneStudent}">+7${phoneStudent}</a>\n\n\
–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å\u00A0—É—á–µ–Ω–∏–∫–æ–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏\u00A0–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ\u00A0–Ω–∞—à–ª–∏ –µ–≥–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å Tutorio.\n\n\
–ß–µ–º —Ä–∞–Ω—å—à–µ –≤—ã –≤—ã–π–¥–µ—Ç–µ –Ω–∞\u00A0—Å–≤—è–∑—å, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å, —á—Ç–æ\u00A0–∏–º–µ–Ω–Ω–æ –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º!\u00A0üåü\n\n\
–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π –∏ –æ—Ç–ª–∏—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!\u00A0üöÄ`,
              token,
              type: "service",
              recipientRole: "tutor",
            })
          ).unwrap();

          // –î–∞–µ–º —Ä–µ–Ω–¥–µ—Ä—É –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å ‚Äî –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø—É—à –∏ —Å–µ—Ç
          setTimeout(async () => {
            try {
              //sendMessageContext(chat.id, messageResponse);
              const data = await dispatch(
                getChatsByUserId({ userId: tutor.userId, role: "tutor", token })
              ).unwrap(); // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

              // –ù–∞–π–¥–µ–º –Ω—É–∂–Ω—ã–π —á–∞—Ç
              const chatToSet = data.find((c) => c.id === chat.id); // –∑–∞–º–µ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –Ω–∞ –Ω—É–∂–Ω–æ–µ

              if (chatToSet) {
                dispatch(setChat(chatToSet)); // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ store
                newChat(chat.id);
              }
              route.push(`/tutor/responses?chatUpdateData=true`);
            } catch (error) {
              console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:", error);
            }
          }, 0);
        }
        dispatch(setIsModalResponseTutorToStudentWithContakt(false));
        dispatch(setLoadingPage(true));
      } catch (error: any) {
        const errorMessage = error?.message;
        if (error?.status === 403 && errorMessage?.includes("–æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è")) {
          setValid(true);
          dispatch(setLoadingPage(false));
          setIsLoading(false);
        } else {
          console.error(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:",
            error
          );
        }
      }
    }
  };

  return (
    <>
      <div className={styles.description}>
        –ü–æ—Å–ª–µ –æ—Ç–∫–ª–∏–∫–∞ —É—á–µ–Ω–∏–∫ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∞ –µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ç–∞–Ω—É—Ç
        –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã üì¨
      </div>
      <div className={styles.inputContainer}>
        <textarea
          placeholder={"–õ—é–±–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ, –∫—Ä–æ–º–µ —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"}
          autoComplete="off"
          value={inputValue}
          onChange={handleInputValue}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={clsx(styles.textarea, {
            [styles.focused]: isFocused,
            [styles.errorInput]: errorInput,
          })}
          maxLength={5000}
        />
      </div>

      {valid && (
        <p className={styles.error}>
          üì´ –û—Ç–∫–ª–∏–∫ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω! –£—á–µ–Ω–∏–∫ —É–∂–µ –∑–∞–∫—Ä—ã–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ
          –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∏—ë–º –æ—Ç–∫–ª–∏–∫–æ–≤
          {/* . <br />
          –ù–æ —ç—Ç–æ –Ω–µ –∫–æ–Ω–µ—Ü ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–∫, —á—Ç–æ –≤–∞—à –∑–∞–∫–∞–∑ –µ—â—ë
          –≤–ø–µ—Ä–µ–¥–∏! üß≠‚ú® */}
        </p>
      )}

      <div className={styles.button}>
        <button
          disabled={isLoading || valid || inputValue.length < 1}
          onClick={update}
          type="button"
        >
          –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
          {isLoading && (
            <div className={styles.buttonYlSpinner2}>
              <Spinner />
            </div>
          )}
        </button>
      </div>
    </>
  );
};
