"use client";
import generalStyles from "../../../app/tutor/layout.module.css";
import styles from "./ResponseSidbar.module.css";
import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { AppDispatch, RootState, useAppSelector } from "@/store/store";
import {
  setIsModalBalanceBoost,
  setValueModalBalanceBoost,
} from "@/store/features/modalSlice";
import { SpinnerSingleOrange } from "@/components/Spinner/SpinnerSingleOrange";
import { useChat } from "@/context/ChatContext";
import { setChat } from "@/store/features/chatSlice";
import { useRouter } from "next/navigation";

export const ResponseSidbar = () => {
  const dispatch = useDispatch<AppDispatch>();
  const route = useRouter();
  // –í—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–æ–ª–ª–∞ –∏—Ö redux, —á—Ç–æ–±—ã —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ top –¥–ª—è —Å—Ç–∏–ª—è sidebarResponse
  const scrollYForSidebarResponse = useAppSelector(
    (state) => state.modal.scrollY
  );
  const [isSafari, setIsSafari] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ Safari
  useEffect(() => {
    const ua = navigator.userAgent.toLowerCase();
    if (ua.includes("safari") && !ua.includes("chrome")) {
      setIsSafari(true);
    }
  }, []);

  const { orderById, loading } = useSelector(
    (state: RootState) => state.orders
  );

  const { chats, chatsLoading, setChatsLoaded } = useChat();

  const existingChat = chats.find((chat) => chat.orderId === orderById?.id);

  return (
    <>
      {!loading && !chatsLoading && (
        <div
          className={generalStyles.sidebarResponse}
          style={
            isSafari ? undefined : { top: `${scrollYForSidebarResponse}px` }
          }
        >
          {!existingChat ? (
            <>
              {orderById?.autoContactsOnResponse ? (
                /* –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ */
                <div className={generalStyles.sidebar_filterBlack}>
                  <div>
                    <h3>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–∫–ª–∏–∫–∞ üî•</h3>
                    <span>
                      –ü–æ—Å–ª–µ –æ—Ç–∫–ª–∏–∫–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —É—á–µ–Ω–∏–∫–∞ –∏ —Å–º–æ–∂–µ—Ç–µ —Å –Ω–∏–º
                      —Å–≤—è–∑–∞—Ç—å—Å—è <br />
                      <br />
                      –ë–æ–ª—å—à–µ –∫–æ–º–∏—Å—Å–∏–π –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –Ω–µ –∫–∞–∂–¥—ã–π –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫
                      –∑–∞–∫–∞–∑—É
                    </span>
                    <div className={styles.button}>
                      <button
                        onClick={(e) => {
                          e.preventDefault();
                          dispatch(setIsModalBalanceBoost(true));
                          orderById?.responseCost &&
                            dispatch(
                              setValueModalBalanceBoost(orderById?.responseCost)
                            );
                        }}
                        type="button"
                      >
                        <span className={styles.textButton}>
                          –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã
                        </span>
                        <span className={styles.priceButton}>
                          {loading ? (
                            <div className={generalStyles.container__spinner}>
                              <div className={generalStyles.spinner}>
                                <SpinnerSingleOrange />
                              </div>
                            </div>
                          ) : orderById?.responseCost ? (
                            `${orderById?.responseCost} —Ä—É–±.`
                          ) : (
                            "–¶–µ–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
                          )}
                        </span>
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                /* –û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑ –±–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ */
                <div className={generalStyles.sidebar_filter}>
                  <div>
                    <h3>–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞–∫–∞–∑</h3>
                    <span>
                      –ü–æ—Å–ª–µ –æ—Ç–∫–ª–∏–∫–∞ —É—á–µ–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –º–æ–∂–µ—Ç
                      –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å–≤–æ–∏ <br />
                      <br />
                      –ë–æ–ª—å—à–µ –∫–æ–º–∏—Å—Å–∏–π –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –Ω–µ –∫–∞–∂–¥—ã–π –æ—Ç–∫–ª–∏–∫ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫
                      –∑–∞–∫–∞–∑—É
                    </span>
                    <div className={styles.button}>
                      <button
                        onClick={(e) => {
                          e.preventDefault();
                          dispatch(setIsModalBalanceBoost(true));
                          orderById?.responseCost &&
                            dispatch(
                              setValueModalBalanceBoost(orderById?.responseCost)
                            );
                        }}
                        type="button"
                      >
                        <span className={styles.textButton}>–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è</span>
                        <span className={styles.priceButton}>
                          {loading ? (
                            <div className={generalStyles.container__spinner}>
                              <div className={generalStyles.spinner}>
                                <SpinnerSingleOrange />
                              </div>
                            </div>
                          ) : orderById?.responseCost ? (
                            `${orderById?.responseCost} —Ä—É–±.`
                          ) : (
                            "–¶–µ–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
                          )}
                        </span>
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </>
          ) : (
            <>
              {existingChat.tutorHasAccess ? (
                <>
                  <div className={generalStyles.sidebar_filter}>
                    <div>
                      <h3>–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑</h3>
                      <span>
                        –í–∞—à –æ—Ç–∫–ª–∏–∫ –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                        <br />
                        <br />
                        –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —á–∞—Ç, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å —É—á–µ–Ω–∏–∫–æ–º
                      </span>
                      <div className={styles.button}>
                        <button
                          className={styles.jtfCntSpBtwn}
                          onClick={(e) => {
                            e.preventDefault();
                            route.push(`responses`);
                            dispatch(setChat(existingChat));
                          }}
                          type="button"
                        >
                          <span className={styles.textButton}>
                            –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
                          </span>
                        </button>
                      </div>
                    </div>
                  </div>
                </>
              ) : (
                <>
                  <div className={generalStyles.sidebar_filter}>
                    <div>
                      <h3>–£—á–µ–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∞–º –∑–∞–∫–∞–∑</h3>
                      <span>
                        –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–∞ —É—á–µ–Ω–∏–∫–∞
                        <br />
                        <br />
                        –ü—Ä–∏–º–∏—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–Ω—è—Ç–∏–π –∏
                        –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
                      </span>
                      <div className={styles.button}>
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            dispatch(setIsModalBalanceBoost(true));
                            orderById?.responseCost &&
                              dispatch(
                                setValueModalBalanceBoost(
                                  orderById?.responseCost
                                )
                              );
                          }}
                          type="button"
                        >
                          <span className={styles.textButton}>
                            –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑
                          </span>
                          <span className={styles.priceButton}>
                            {loading ? (
                              <div className={generalStyles.container__spinner}>
                                <div className={generalStyles.spinner}>
                                  <SpinnerSingleOrange />
                                </div>
                              </div>
                            ) : orderById?.responseCost ? (
                              `${orderById?.responseCost} —Ä—É–±.`
                            ) : (
                              "–¶–µ–Ω–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
                            )}
                          </span>
                        </button>
                      </div>
                    </div>
                  </div>
                </>
              )}
            </>
          )}
        </div>
      )}
    </>
  );
};
