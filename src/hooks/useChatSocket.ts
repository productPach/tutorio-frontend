import { useEffect, useState } from "react";
import { useSocket } from "@/context/SocketContext";
import { useAppDispatch, useAppSelector } from "@/store/store";
import { addMessageToChat, getChatById, markMessagesAsRead } from "@/store/features/chatSlice";
import { useChat } from "@/context/ChatContext";

type Message = {
  id: string;
  chatId: string;
  senderId: string;
  text: string;
  createdAt: string;
  isRead: boolean;
};

export const useChatSocket = (chatId: string) => {
  const { socket } = useSocket();
  const dispatch = useAppDispatch();
    const token = useAppSelector((state) => state.auth.token);
  const studentId = useAppSelector((state) => state.student.student?.id);
  const tutorId: string | null = useAppSelector(
    (state) => state.tutor.tutor?.id ?? null
  );
  const [messages, setMessages] = useState<Message[]>([]);
  const [unreadCount, setUnreadCount] = useState<number>(0);
  const chat = useAppSelector((state) => state.chat.chat);

  const { handleReadMessages } = useChat();

  useEffect(() => {
    if (!socket || !chatId || !(studentId || tutorId)) return;

    const userId = studentId || tutorId; // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π userId –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏

    console.log("–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —á–∞—Ç—É", chatId);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
    socket.emit("joinChat", { userId, chatIds: [chatId] });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ Redux
    const fetchChat = async () => {
        try {
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —á–∞—Ç —á–µ—Ä–µ–∑ Redux
          const response = await dispatch(getChatById({ chatId, token: token || "" })).unwrap();
          setMessages(response.messages); // <-- –Ω–∞–ø—Ä—è–º—É—é –∏–∑ payload
          markAsRead(response.messages);
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞:", error);
        }
      };
  
      fetchChat(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç

    const handleNewMessage = (message: Message) => {
      if (message.chatId === chatId) {
        
        setMessages((prev) => {
          const updated = [...prev, message];
          // –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–∑—ã–≤–∞–µ–º markAsRead —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º
          setTimeout(() => markAsRead(updated), 0); // –Ω–µ–±–æ–ª—å—à–æ–π —Ö–∞–∫
          return updated;
        });
        dispatch(addMessageToChat(message)); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

      }
    };

    const handleMessagesRead = (data: { chatId: string; messageIds: string[] }) => {
      
      if (data.chatId === chatId) {
        //console.log("üî• messagesRead –ø—Ä–∏—à–µ–ª:", data);
        dispatch(markMessagesAsRead({ chatId: data.chatId, messageIds: data.messageIds }));
        if (userId) {
          handleReadMessages({ chatId: data.chatId, userId });
        }
      }
    };

    const handleUnreadCount = (data: { chatId: string; userId: string; unreadCount: number }) => {
      if (data.chatId === chatId && data.userId === userId) {
        setUnreadCount(data.unreadCount);
      }
    };

    socket.on("newMessage", handleNewMessage);
    socket.on("messagesRead", handleMessagesRead);
    socket.on("updateUnreadCount", handleUnreadCount);

    return () => {
      // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —á–∞—Ç–∞
      socket.off("newMessage", handleNewMessage);
      socket.off("messagesRead", handleMessagesRead);
      socket.off("updateUnreadCount", handleUnreadCount);
      //socket.emit("leaveChat", { chatId });
    };
  }, [socket, chatId, studentId, tutorId]); // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏



  const sendMessageSocket = (message: Message) => {
    if (!socket || !(studentId || tutorId)) return;

    const userId = studentId || tutorId;
    
    socket.emit("sendMessage", {
      chatId,
      message,
    });
  };

  const markAsRead = (msgs: Message[]) => {
    if (!socket || !(studentId || tutorId)) return;
  
    const userId = studentId || tutorId;
    //console.log("–æ—Ç–ø—Ä–∞–≤–∫–∞ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏");

  
  
    const unreadMessageIds = msgs
      .filter(
        (msg) =>
          !msg.isRead &&
          msg.senderId !== userId &&
          !msg.id.startsWith("temp-") // —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ ID
      )
      .map((msg) => msg.id);

      //console.log(unreadMessageIds);
      
  
    if (unreadMessageIds.length === 0) return;
  
    socket.emit("markAsRead", {
      chatId,
      messageIds: unreadMessageIds,
      userId,
    });
  };
  

  return {
    messages,
    unreadCount,
    sendMessageSocket,
    markAsRead,
  };
};
